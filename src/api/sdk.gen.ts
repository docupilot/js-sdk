// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { CreateTemplateOnlineBuilderAiData, CreateTemplateOnlineBuilderAiResponse, EditTemplateOnlineBuilderAiData, EditTemplateOnlineBuilderAiResponse, PromptSuggestionsOnlineBuilderAiData, PromptSuggestionsOnlineBuilderAiResponse, ListAllChatThreadsData, ListAllChatThreadsResponse, CreateNewCustomerThreadData, CreateNewCustomerThreadResponse, AiChatThreadsRetrieveData, AiChatThreadsRetrieveResponse, UpdateCustomerThreadData, UpdateCustomerThreadResponse, AiChatThreadsDestroyData, AiChatThreadsDestroyResponse, GetMessagesForThreadData, GetMessagesForThreadResponse, UpdateCustomerThreadNameData, UpdateCustomerThreadNameResponse, AppendFilesData, AppendFilesResponse, ListAuthTokensData, ListAuthTokensResponse, CreateAuthTokenData, CreateAuthTokenResponse, UpdateAuthTokenData, UpdateAuthTokenResponse, DeleteAuthTokenData, DeleteAuthTokenResponse, CreateDemographicData, CreateDemographicResponse, ShowDemographicPromptForWorkspaceUsersResponse, ValidateDomainAndSetDemographicData, ValidateDomainAndSetDemographicResponse, GetDomainData, GetDomainResponse, VerifyDomainData, VerifyDomainResponse, ListFoldersData, ListFoldersResponse, CreateFolderData, CreateFolderResponse, ListFolderSharingData, ListFolderSharingResponse, CreateFolderSharingPermissionData, CreateFolderSharingPermissionResponse, GetFolderSharingData, GetFolderSharingResponse, UpdateFolderSharingPermissionContentData, UpdateFolderSharingPermissionContentResponse, RevokeFolderSharingPermissionData, RevokeFolderSharingPermissionResponse, UpdateFolderData, UpdateFolderResponse, DeleteFolderData, DeleteFolderResponse, GetUserCreatedFolderCountData, GetUserCreatedFolderCountResponse, FoldersSharingStatusRetrieveResponse, ListGalleryTemplatesData, ListGalleryTemplatesResponse, GetGalleryTemplateData, GetGalleryTemplateResponse, ListBannerNotificationsResponse, GetAppMetaResponse, ListSubscriptionPlansResponse, ListTimezonesResponse, GenerateDocumentData, GenerateDocumentResponse, TestDocumentGenerationData, TestDocumentGenerationResponse, GetTestDataData, GetTestDataResponse, ListGenerationLinksData, ListGenerationLinksResponse, ListBulkGenerationTasksData, ListBulkGenerationTasksResponse, GetBulkGenerationTaskData, GetBulkGenerationTaskResponse, CancelBulkGenerationTaskData, CancelBulkGenerationTaskResponse, GetBulkGenerationDraftData, GetBulkGenerationDraftResponse, SaveBulkGenerationDraftData, SaveBulkGenerationDraftResponse, TriggerBulkGenerationDraftData, TriggerBulkGenerationDraftResponse, UploadForBulkGenerationData, UploadForBulkGenerationResponse, GetCreatedDocumentsHistoryData, GetCreatedDocumentsHistoryResponse, DownloadCreatedDocumentData, DownloadCreatedDocumentResponse, RetryDeliveryData, RetryDeliveryResponse, GetCreatedExportMergeHistoryData, GetCreatedExportMergeHistoryResponse, CreateExportHistoryTaskData, CreateExportHistoryTaskResponse, DownloadCreatedExportDocumentData, DownloadCreatedExportDocumentResponse, ListInvitationData, ListInvitationResponse, CreateInvitationData, CreateInvitationResponse, RetrieveInvitationByKeyData, RetrieveInvitationByKeyResponse, DeleteInvitationData, DeleteInvitationResponse, RetrieveInvitationForAcceptData, RetrieveInvitationForAcceptResponse, AcceptInvitationData, AcceptInvitationResponse, ResendInvitationData, ResendInvitationResponse, ListDeliveryAccountsData, ListDeliveryAccountsResponse, AddDeliveryAccountData, AddDeliveryAccountResponse, InvokeIntegratorData, UpdateDeliveryAccountData, UpdateDeliveryAccountResponse, RevokeDeliveryAccountData, RevokeDeliveryAccountResponse, ListAccountDeliveriesData, ListAccountDeliveriesResponse, ListDeliveryEmailsForEmailAccountData, ListDeliveryEmailsForEmailAccountResponse, GetDocusignFoldersData, GetDocusignFoldersResponse, GetGooglePickerPayloadData, GetGooglePickerPayloadResponse, InitiateEmailAuthorizationData, InitiateEmailAuthorizationResponse, ReconnectAccountData, UpdateDeliveryAccountsUseForImagesFlagData, UpdateDeliveryAccountsUseForImagesFlagResponse, VerifyEmailOtpData, VerifyEmailOtpResponse, SendTestMailData, SendTestMailResponse, GetCreatedDocumentsMergeHistoryData, GetCreatedDocumentsMergeHistoryResponse, GetFolderPermissionsData, GetFolderPermissionsResponse, GetGlobalPermissionsResponse, GetTemplatePermissionsData, GetTemplatePermissionsResponse, GetUserPersonalizationResponse, UpdateUserPersonalizationData, UpdateUserPersonalizationResponse, GetSubscriptionDetailsResponse, ExtendTrialResponse, GetChargebeeHostedPageData, GetChargebeeHostedPageResponse, GetChargebeePortalSessionResponse, SubscriptionRenewRequestCreateData, SubscriptionRenewRequestCreateResponse, ResumeSubscriptionResponse, GetChargebeeUnpaidInvoicesResponse, ListAllTeamMembersData, ListAllTeamMembersResponse, DeleteTeamMemberData, DeleteTeamMemberResponse, ChangeRoleOfTeamMemberData, ChangeRoleOfTeamMemberResponse, TransferOwnershipToAdminUserData, TransferOwnershipToAdminUserResponse, ListTemplateDeliveriesData, ListTemplateDeliveriesResponse, CreateTemplateDeliveryData, CreateTemplateDeliveryResponse, RetrieveTemplateDeliveryData, RetrieveTemplateDeliveryResponse, UpdateTemplateDeliveryData, UpdateTemplateDeliveryResponse, DeleteTemplateDeliveryData, DeleteTemplateDeliveryResponse, UploadDeliveryAttachmentsData, UploadDeliveryAttachmentsResponse, DownloadDeliveryAttachmentData, DownloadDeliveryAttachmentResponse, DeleteDeliveryAttachmentData, DeleteDeliveryAttachmentResponse, UpgradeDocusignDeliveryData, UpgradeDocusignDeliveryResponse, ListTemplatesData, ListTemplatesResponse, CreateTemplateData, CreateTemplateResponse, GetTemplateData, GetTemplateResponse, UpdateTemplateData, UpdateTemplateResponse, UpdateTemplateContentData, UpdateTemplateContentResponse, TrashTemplateData, TrashTemplateResponse, CopyTemplateData, CopyTemplateResponse, DownloadTemplateFileData, DownloadTemplateFileResponse, UploadInlineImageOfTemplateData, UploadInlineImageOfTemplateResponse, DeleteTemplatePermanentlyData, DeleteTemplatePermanentlyResponse, RestoreTemplateFromTrashData, RestoreTemplateFromTrashResponse, GetTemplateSchemaData, GetTemplateSchemaResponse, GetDetailedTemplateSchemaData, GetDetailedTemplateSchemaResponse, ListTemplateSharingData, ListTemplateSharingResponse, CreateTemplateSharingPermissionData, CreateTemplateSharingPermissionResponse, GetTemplateSharingData, GetTemplateSharingResponse, UpdateTemplateSharingPermissionContentData, UpdateTemplateSharingPermissionContentResponse, RevokeTemplateSharingPermissionData, RevokeTemplateSharingPermissionResponse, ListAllTemplatesResponse, GetUserCreatedTemplatesCountData, GetUserCreatedTemplatesCountResponse, MoveTemplatesToAnotherFolderData, MoveTemplatesToAnotherFolderResponse, TemplatesSharingStatusRetrieveResponse, ListTrashedTemplatesResponse, InitiateAuthorizationSequenceData, InitiateAuthorizationSequenceResponse, GetMeResponse, UpdateUserProfileData, UpdateUserProfileResponse, NpsNextReminderData, NpsNextReminderResponse, NpsRatingData, NpsRatingResponse, SaveCustomerFeedbackData, SaveCustomerFeedbackResponse, ShowSurveyPromptResponse, UpdateG2ReviewUpdatedOnResponse, ListWorkspacesData, ListWorkspacesResponse, CreateWorkspaceData, CreateWorkspaceResponse, GetCsmDetailsResponse, GetCurrentWorkspaceResponse, UpdateCurrentWorkspaceData, UpdateCurrentWorkspaceResponse, DeleteCurrentWorkspaceData, DeleteCurrentWorkspaceResponse, GetWorkspaceDataRetentionPreferenceResponse, UpdateWorkspaceDataRetentionPreferenceData, UpdateWorkspaceDataRetentionPreferenceResponse } from './types.gen';

export class AiService {
    /**
     * create template using ai
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Template
     * @throws ApiError
     */
    public static createTemplateOnlineBuilderAi(data: CreateTemplateOnlineBuilderAiData): CancelablePromise<CreateTemplateOnlineBuilderAiResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ai/online-builder/create_template/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * edit template using chat completion
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AITemplateEdit
     * @throws ApiError
     */
    public static editTemplateOnlineBuilderAi(data: EditTemplateOnlineBuilderAiData): CancelablePromise<EditTemplateOnlineBuilderAiResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ai/online-builder/edit_template/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * list prompt suggestions based on template name and description
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PromptSuggestions
     * @throws ApiError
     */
    public static promptSuggestionsOnlineBuilderAi(data: PromptSuggestionsOnlineBuilderAiData): CancelablePromise<PromptSuggestionsOnlineBuilderAiResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ai/online-builder/list_prompt_suggestions/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
}

export class AiChatService {
    /**
     * List all chat threads
     * @param data The data for the request.
     * @param data.ordering Which field to use when ordering the results.
     * @param data.search A search term.
     * @returns ChatThreads
     * @throws ApiError
     */
    public static listAllChatThreads(data: ListAllChatThreadsData = {}): CancelablePromise<ListAllChatThreadsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/ai-chat/threads/',
            query: {
                ordering: data.ordering,
                search: data.search
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * create new customer thread
     * @param data The data for the request.
     * @param data.requestBody
     * @returns CreateCustomerThreadOutput
     * @throws ApiError
     */
    public static createNewCustomerThread(data: CreateNewCustomerThreadData): CancelablePromise<CreateNewCustomerThreadResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ai-chat/threads/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.threadId
     * @returns ChatThreads
     * @throws ApiError
     */
    public static aiChatThreadsRetrieve(data: AiChatThreadsRetrieveData): CancelablePromise<AiChatThreadsRetrieveResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/ai-chat/threads/{thread_id}/',
            path: {
                thread_id: data.threadId
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * update existing customer thread
     * @param data The data for the request.
     * @param data.threadId
     * @param data.requestBody
     * @returns UpdateCustomerThreadOutput
     * @throws ApiError
     */
    public static updateCustomerThread(data: UpdateCustomerThreadData): CancelablePromise<UpdateCustomerThreadResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/ai-chat/threads/{thread_id}/',
            path: {
                thread_id: data.threadId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.threadId
     * @returns void No response body
     * @throws ApiError
     */
    public static aiChatThreadsDestroy(data: AiChatThreadsDestroyData): CancelablePromise<AiChatThreadsDestroyResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/ai-chat/threads/{thread_id}/',
            path: {
                thread_id: data.threadId
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Get all messages for a thread
     * @param data The data for the request.
     * @param data.threadId
     * @returns ThreadMessages
     * @throws ApiError
     */
    public static getMessagesForThread(data: GetMessagesForThreadData): CancelablePromise<GetMessagesForThreadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/ai-chat/threads/{thread_id}/messages/',
            path: {
                thread_id: data.threadId
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * update customer thread name
     * @param data The data for the request.
     * @param data.threadId
     * @param data.requestBody
     * @returns void No response body
     * @throws ApiError
     */
    public static updateCustomerThreadName(data: UpdateCustomerThreadNameData): CancelablePromise<UpdateCustomerThreadNameResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/ai-chat/threads/{thread_id}/update_thread_name/',
            path: {
                thread_id: data.threadId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
}

export class AppendService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.xClient Client Origin
     * @returns unknown
     * @throws ApiError
     */
    public static appendFiles(data: AppendFilesData): CancelablePromise<AppendFilesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/append/',
            headers: {
                'X-Client': data.xClient
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
}

export class AuthTokensService {
    /**
     * @param data The data for the request.
     * @param data.ordering Which field to use when ordering the results.
     * @param data.search A search term.
     * @returns AuthToken
     * @throws ApiError
     */
    public static listAuthTokens(data: ListAuthTokensData = {}): CancelablePromise<ListAuthTokensResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/auth_tokens/',
            query: {
                ordering: data.ordering,
                search: data.search
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AuthToken
     * @throws ApiError
     */
    public static createAuthToken(data: CreateAuthTokenData): CancelablePromise<CreateAuthTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/auth_tokens/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this auth token.
     * @param data.requestBody
     * @returns AuthToken
     * @throws ApiError
     */
    public static updateAuthToken(data: UpdateAuthTokenData): CancelablePromise<UpdateAuthTokenResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/accounts/v2/auth_tokens/{id}/',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this auth token.
     * @returns void No response body
     * @throws ApiError
     */
    public static deleteAuthToken(data: DeleteAuthTokenData): CancelablePromise<DeleteAuthTokenResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/accounts/v2/auth_tokens/{id}/',
            path: {
                id: data.id
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
}

export class DemographicService {
    /**
     * Create Demographic
     * @param data The data for the request.
     * @param data.requestBody
     * @returns void No response body
     * @throws ApiError
     */
    public static createDemographic(data: CreateDemographicData = {}): CancelablePromise<CreateDemographicResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/demographic/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Show demographic prompt for workspace users
     * @returns ShowDemographicPrompt
     * @throws ApiError
     */
    public static showDemographicPromptForWorkspaceUsers(): CancelablePromise<ShowDemographicPromptForWorkspaceUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/demographic/show_prompt/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Verify domain and set demographic
     * @param data The data for the request.
     * @param data.requestBody
     * @returns VerifyDomain
     * @throws ApiError
     */
    public static validateDomainAndSetDemographic(data: ValidateDomainAndSetDemographicData): CancelablePromise<ValidateDomainAndSetDemographicResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/demographic/validate_domain_and_set_demographic/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
}

export class DomainService {
    /**
     * Get one domain
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this domain.
     * @returns Domain
     * @throws ApiError
     */
    public static getDomain(data: GetDomainData): CancelablePromise<GetDomainResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/domain/{id}/',
            path: {
                id: data.id
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * verify domain
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this domain.
     * @param data.requestBody
     * @returns DomainVerify
     * @throws ApiError
     */
    public static verifyDomain(data: VerifyDomainData): CancelablePromise<VerifyDomainResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v2/domain/{id}/verify/',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
}

export class FoldersService {
    /**
     * Get list of folders
     * @param data The data for the request.
     * @param data.ordering Which field to use when ordering the results.
     * @param data.permission
     * @returns Folder
     * @throws ApiError
     */
    public static listFolders(data: ListFoldersData = {}): CancelablePromise<ListFoldersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/folders/',
            query: {
                ordering: data.ordering,
                permission: data.permission
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Create a folder
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Folder
     * @throws ApiError
     */
    public static createFolder(data: CreateFolderData): CancelablePromise<CreateFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/folders/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Get all shared permissions for specific folder
     * @param data The data for the request.
     * @param data.folderId
     * @returns FolderSharing
     * @throws ApiError
     */
    public static listFolderSharing(data: ListFolderSharingData): CancelablePromise<ListFolderSharingResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/folders/{folder_id}/permissions/',
            path: {
                folder_id: data.folderId
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Create folder sharing permission
     * @param data The data for the request.
     * @param data.folderId
     * @param data.requestBody
     * @returns FolderSharing
     * @throws ApiError
     */
    public static createFolderSharingPermission(data: CreateFolderSharingPermissionData): CancelablePromise<CreateFolderSharingPermissionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/folders/{folder_id}/permissions/',
            path: {
                folder_id: data.folderId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Get specific permission details for given folder
     * @param data The data for the request.
     * @param data.folderId
     * @param data.id A unique integer value identifying this folder sharing setting.
     * @returns FolderSharing
     * @throws ApiError
     */
    public static getFolderSharing(data: GetFolderSharingData): CancelablePromise<GetFolderSharingResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/folders/{folder_id}/permissions/{id}/',
            path: {
                folder_id: data.folderId,
                id: data.id
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Update folder content partially
     * @param data The data for the request.
     * @param data.folderId
     * @param data.id A unique integer value identifying this folder sharing setting.
     * @param data.requestBody
     * @returns FolderSharing
     * @throws ApiError
     */
    public static updateFolderSharingPermissionContent(data: UpdateFolderSharingPermissionContentData): CancelablePromise<UpdateFolderSharingPermissionContentResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v2/folders/{folder_id}/permissions/{id}/',
            path: {
                folder_id: data.folderId,
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Revoke folder sharing permission
     * @param data The data for the request.
     * @param data.folderId
     * @param data.id A unique integer value identifying this folder sharing setting.
     * @returns void No response body
     * @throws ApiError
     */
    public static revokeFolderSharingPermission(data: RevokeFolderSharingPermissionData): CancelablePromise<RevokeFolderSharingPermissionResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v2/folders/{folder_id}/permissions/{id}/',
            path: {
                folder_id: data.folderId,
                id: data.id
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Updates a folder
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this folder.
     * @param data.requestBody
     * @returns Folder
     * @throws ApiError
     */
    public static updateFolder(data: UpdateFolderData): CancelablePromise<UpdateFolderResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v2/folders/{id}/',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Delete a folder.
     * This operation moves all templates under this folder to home directory.
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this folder.
     * @returns void No response body
     * @throws ApiError
     */
    public static deleteFolder(data: DeleteFolderData): CancelablePromise<DeleteFolderResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v2/folders/{id}/',
            path: {
                id: data.id
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Get the count of folders created by the user.
     * @param data The data for the request.
     * @param data.ownerId Owner Id of resource
     * @returns FolderCount
     * @throws ApiError
     */
    public static getUserCreatedFolderCount(data: GetUserCreatedFolderCountData): CancelablePromise<GetUserCreatedFolderCountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/folders/count/',
            query: {
                owner_id: data.ownerId
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * @returns SharingInfoFolder
     * @throws ApiError
     */
    public static foldersSharingStatusRetrieve(): CancelablePromise<FoldersSharingStatusRetrieveResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/folders/sharing_status/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
}

export class GalleryTemplatesService {
    /**
     * Get list of galery templates
     * @param data The data for the request.
     * @param data.category
     * @param data.ordering Which field to use when ordering the results.
     * @param data.search A search term.
     * @returns TemplateGallery
     * @throws ApiError
     */
    public static listGalleryTemplates(data: ListGalleryTemplatesData = {}): CancelablePromise<ListGalleryTemplatesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/template_gallery/',
            query: {
                category: data.category,
                ordering: data.ordering,
                search: data.search
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Get one template
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this template gallery.
     * @returns TemplateGallery
     * @throws ApiError
     */
    public static getGalleryTemplate(data: GetGalleryTemplateData): CancelablePromise<GetGalleryTemplateResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/template_gallery/{id}/',
            path: {
                id: data.id
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
}

export class GeneralService {
    /**
     * @returns BannerNotification
     * @throws ApiError
     */
    public static listBannerNotifications(): CancelablePromise<ListBannerNotificationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/banner_notifications/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * @returns Meta
     * @throws ApiError
     */
    public static getAppMeta(): CancelablePromise<GetAppMetaResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/meta/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * @returns Plan
     * @throws ApiError
     */
    public static listSubscriptionPlans(): CancelablePromise<ListSubscriptionPlansResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/plans/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * @returns Timezone
     * @throws ApiError
     */
    public static listTimezones(): CancelablePromise<ListTimezonesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tz/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
}

export class GenerateService {
    /**
     * Generate document from template
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this document.
     * @param data.xClient Client Origin
     * @param data.download
     * @param data.outputType
     * @param data.requestBody
     * @returns Template
     * @throws ApiError
     */
    public static generateDocument(data: GenerateDocumentData): CancelablePromise<GenerateDocumentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/templates/{id}/generate/',
            path: {
                id: data.id
            },
            headers: {
                'X-Client': data.xClient
            },
            query: {
                download: data.download,
                output_type: data.outputType
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Test document generation
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this document.
     * @param data.outputType
     * @param data.requestBody
     * @returns Template
     * @throws ApiError
     */
    public static testDocumentGeneration(data: TestDocumentGenerationData): CancelablePromise<TestDocumentGenerationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/templates/{id}/test/',
            path: {
                id: data.id
            },
            query: {
                output_type: data.outputType
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Get test data used for testing template
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this document.
     * @returns Template
     * @throws ApiError
     */
    public static getTestData(data: GetTestDataData): CancelablePromise<GetTestDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/{id}/test_data/',
            path: {
                id: data.id
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Get document create link path
     * URL to create document will be {host}/{path}
     * @param data The data for the request.
     * @param data.templateId
     * @returns DocumentMergeLink
     * @throws ApiError
     */
    public static listGenerationLinks(data: ListGenerationLinksData): CancelablePromise<ListGenerationLinksResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/{template_id}/merge_links/',
            path: {
                template_id: data.templateId
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
}

export class GenerateBulkService {
    /**
     * List bulk generation tasks
     * @param data The data for the request.
     * @param data.templateId
     * @param data.ordering Which field to use when ordering the results.
     * @param data.page A page number within the paginated result set.
     * @param data.status
     * @returns PaginatedBulkGenList
     * @throws ApiError
     */
    public static listBulkGenerationTasks(data: ListBulkGenerationTasksData): CancelablePromise<ListBulkGenerationTasksResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/{template_id}/generate/bulk/',
            path: {
                template_id: data.templateId
            },
            query: {
                ordering: data.ordering,
                page: data.page,
                status: data.status
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Get bulk generation task
     * @param data The data for the request.
     * @param data.id Task id
     * @param data.templateId Template id
     * @returns BulkGen
     * @throws ApiError
     */
    public static getBulkGenerationTask(data: GetBulkGenerationTaskData): CancelablePromise<GetBulkGenerationTaskResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/{template_id}/generate/bulk/{id}/',
            path: {
                id: data.id,
                template_id: data.templateId
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Cancel a bulk generation task
     * @param data The data for the request.
     * @param data.id Task id
     * @param data.templateId Template id
     * @param data.requestBody
     * @returns BulkGen
     * @throws ApiError
     */
    public static cancelBulkGenerationTask(data: CancelBulkGenerationTaskData): CancelablePromise<CancelBulkGenerationTaskResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v2/templates/{template_id}/generate/bulk/{id}/cancel/',
            path: {
                id: data.id,
                template_id: data.templateId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Get a task saved as draft
     * @param data The data for the request.
     * @param data.id Task id
     * @param data.templateId Template id
     * @returns BulkGenData
     * @throws ApiError
     */
    public static getBulkGenerationDraft(data: GetBulkGenerationDraftData): CancelablePromise<GetBulkGenerationDraftResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/{template_id}/generate/bulk/{id}/draft/',
            path: {
                id: data.id,
                template_id: data.templateId
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * save a template mapping
     * @param data The data for the request.
     * @param data.id Task id
     * @param data.templateId Template id
     * @param data.requestBody
     * @returns void No response body
     * @throws ApiError
     */
    public static saveBulkGenerationDraft(data: SaveBulkGenerationDraftData): CancelablePromise<SaveBulkGenerationDraftResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/templates/{template_id}/generate/bulk/{id}/draft/',
            path: {
                id: data.id,
                template_id: data.templateId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Trigger a bulk generation task
     * @param data The data for the request.
     * @param data.id Task id
     * @param data.templateId Template id
     * @param data.requestBody
     * @returns BulkGen
     * @throws ApiError
     */
    public static triggerBulkGenerationDraft(data: TriggerBulkGenerationDraftData): CancelablePromise<TriggerBulkGenerationDraftResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v2/templates/{template_id}/generate/bulk/{id}/trigger/',
            path: {
                id: data.id,
                template_id: data.templateId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Upload a new csv for bulk generate.
     * This will create a task in DRAFT mode.
     * @param data The data for the request.
     * @param data.templateId Template id
     * @param data.formData
     * @returns BulkGenData
     * @throws ApiError
     */
    public static uploadForBulkGeneration(data: UploadForBulkGenerationData): CancelablePromise<UploadForBulkGenerationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/templates/{template_id}/generate/bulk/upload/',
            path: {
                template_id: data.templateId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                400: '',
                401: '',
                403: '',
                404: '',
                413: ''
            }
        });
    }
    
}

export class HistoryService {
    /**
     * Get created documents history
     * @param data The data for the request.
     * @param data.endDate DateTime in this format: 2019-05-02 16:25:12.353000
     * @param data.ordering Which field to use when ordering the results.
     * @param data.page A page number within the paginated result set.
     * @param data.startDate DateTime in this format: 2019-05-02 16:25:12.353000
     * @param data.status
     * @param data.template
     * @returns PaginatedMergeHistoryList
     * @throws ApiError
     */
    public static getCreatedDocumentsHistory(data: GetCreatedDocumentsHistoryData = {}): CancelablePromise<GetCreatedDocumentsHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/history/',
            query: {
                end_date: data.endDate,
                ordering: data.ordering,
                page: data.page,
                start_date: data.startDate,
                status: data.status,
                template: data.template
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * download generated document if available
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this merge history.
     * @returns binary
     * @throws ApiError
     */
    public static downloadCreatedDocument(data: DownloadCreatedDocumentData): CancelablePromise<DownloadCreatedDocumentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/history/{id}/download/',
            path: {
                id: data.id
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * retry failed documents delivery
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this merge history.
     * @param data.requestBody
     * @returns MergeHistory
     * @throws ApiError
     */
    public static retryDelivery(data: RetryDeliveryData): CancelablePromise<RetryDeliveryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/history/{id}/retry_delivery/',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Get created export history
     * @param data The data for the request.
     * @param data.ordering Which field to use when ordering the results.
     * @returns ExportMergeHistory
     * @throws ApiError
     */
    public static getCreatedExportMergeHistory(data: GetCreatedExportMergeHistoryData = {}): CancelablePromise<GetCreatedExportMergeHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/history/export/',
            query: {
                ordering: data.ordering
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Create export history task
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ExportMergeHistory
     * @throws ApiError
     */
    public static createExportHistoryTask(data: CreateExportHistoryTaskData): CancelablePromise<CreateExportHistoryTaskResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/history/export/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * download generated export document if available
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this export merge history task.
     * @returns binary
     * @throws ApiError
     */
    public static downloadCreatedExportDocument(data: DownloadCreatedExportDocumentData): CancelablePromise<DownloadCreatedExportDocumentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/history/export/{id}/download/',
            path: {
                id: data.id
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
}

export class InvitationsService {
    /**
     * Get list of Invitation
     * @param data The data for the request.
     * @param data.isAccepted
     * @param data.ordering Which field to use when ordering the results.
     * @param data.search A search term.
     * @returns Invitation
     * @throws ApiError
     */
    public static listInvitation(data: ListInvitationData = {}): CancelablePromise<ListInvitationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/invitations/',
            query: {
                is_accepted: data.isAccepted,
                ordering: data.ordering,
                search: data.search
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Create Invitation
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Invitation
     * @throws ApiError
     */
    public static createInvitation(data: CreateInvitationData): CancelablePromise<CreateInvitationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/invitations/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Get Invitation
     * @param data The data for the request.
     * @param data.inviteKey
     * @returns Invitation
     * @throws ApiError
     */
    public static retrieveInvitationByKey(data: RetrieveInvitationByKeyData): CancelablePromise<RetrieveInvitationByKeyResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/invitations/{invite_key}/get_by_key/',
            path: {
                invite_key: data.inviteKey
            },
            errors: {
                404: ''
            }
        });
    }
    
    /**
     * Delete Invitation
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this invitation.
     * @returns void No response body
     * @throws ApiError
     */
    public static deleteInvitation(data: DeleteInvitationData): CancelablePromise<DeleteInvitationResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/accounts/v2/invitations/{id}/',
            path: {
                id: data.id
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * retrieve invitation for accept
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this invitation.
     * @returns Invitation
     * @throws ApiError
     */
    public static retrieveInvitationForAccept(data: RetrieveInvitationForAcceptData): CancelablePromise<RetrieveInvitationForAcceptResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/invitations/{id}/accept_invitation/',
            path: {
                id: data.id
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Accept invitation
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this invitation.
     * @returns AcceptInvite
     * @throws ApiError
     */
    public static acceptInvitation(data: AcceptInvitationData): CancelablePromise<AcceptInvitationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/invitations/{id}/accept_invitation/',
            path: {
                id: data.id
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Resend invitation
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this invitation.
     * @returns Invitation
     * @throws ApiError
     */
    public static resendInvitation(data: ResendInvitationData): CancelablePromise<ResendInvitationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/invitations/{id}/resend_invitation/',
            path: {
                id: data.id
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
}

export class LinkedAccountsService {
    /**
     * Get list of linked accounts
     * @param data The data for the request.
     * @param data.ordering Which field to use when ordering the results.
     * @param data.search A search term.
     * @param data.type
     * @returns DeliveryAccount
     * @throws ApiError
     */
    public static listDeliveryAccounts(data: ListDeliveryAccountsData = {}): CancelablePromise<ListDeliveryAccountsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/linked_accounts/',
            query: {
                ordering: data.ordering,
                search: data.search,
                type: data.type
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Create linked account
     * @param data The data for the request.
     * @param data.requestBody
     * @returns DeliveryAccount
     * @throws ApiError
     */
    public static addDeliveryAccount(data: AddDeliveryAccountData): CancelablePromise<AddDeliveryAccountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/linked_accounts/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Redirects to oauth endpoint to add a new linked account of given 'integrator_type'
     * @param data The data for the request.
     * @param data.integratorType
     * @param data.environment sub-type of integrator. For example: sandbox or production for docu_sign
     * @throws ApiError
     */
    public static invokeIntegrator(data: InvokeIntegratorData): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/linked_accounts/{integrator_type}/invoke/',
            path: {
                integrator_type: data.integratorType
            },
            query: {
                environment: data.environment
            },
            errors: {
                302: 'No response body',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Refresh linked account
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this delivery account.
     * @param data.requestBody
     * @returns DeliveryAccount
     * @throws ApiError
     */
    public static updateDeliveryAccount(data: UpdateDeliveryAccountData): CancelablePromise<UpdateDeliveryAccountResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v2/linked_accounts/{id}/',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Revoke linked account
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this delivery account.
     * @returns void No response body
     * @throws ApiError
     */
    public static revokeDeliveryAccount(data: RevokeDeliveryAccountData): CancelablePromise<RevokeDeliveryAccountResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v2/linked_accounts/{id}/',
            path: {
                id: data.id
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * List account deliveries
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this delivery account.
     * @param data.page A page number within the paginated result set.
     * @param data.type
     * @returns PaginatedAccountDeliveryList
     * @throws ApiError
     */
    public static listAccountDeliveries(data: ListAccountDeliveriesData): CancelablePromise<ListAccountDeliveriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/linked_accounts/{id}/deliveries/',
            path: {
                id: data.id
            },
            query: {
                page: data.page,
                type: data.type
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * List delivery emails for email account
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this delivery account.
     * @returns string An array of emails
     * @throws ApiError
     */
    public static listDeliveryEmailsForEmailAccount(data: ListDeliveryEmailsForEmailAccountData): CancelablePromise<ListDeliveryEmailsForEmailAccountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/linked_accounts/{id}/delivery_emails/',
            path: {
                id: data.id
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Get docusign folders
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this delivery account.
     * @returns DeliveryAccount
     * @throws ApiError
     */
    public static getDocusignFolders(data: GetDocusignFoldersData): CancelablePromise<GetDocusignFoldersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/linked_accounts/{id}/docusign_folders/',
            path: {
                id: data.id
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Get google picker payload
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this delivery account.
     * @returns GoogleDrivePickerPayload
     * @throws ApiError
     */
    public static getGooglePickerPayload(data: GetGooglePickerPayloadData): CancelablePromise<GetGooglePickerPayloadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/linked_accounts/{id}/google_picker_payload/',
            path: {
                id: data.id
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Initiate email authorization
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this delivery account.
     * @param data.requestBody
     * @returns void No response body
     * @throws ApiError
     */
    public static initiateEmailAuthorization(data: InitiateEmailAuthorizationData): CancelablePromise<InitiateEmailAuthorizationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/linked_accounts/{id}/initiate_authorization/',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Redirects to oauth endpoint for re-connecting an account
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this delivery account.
     * @throws ApiError
     */
    public static reconnectAccount(data: ReconnectAccountData): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/linked_accounts/{id}/reconnect/',
            path: {
                id: data.id
            },
            errors: {
                302: 'No response body',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Update delivery accounts use for images flag
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this delivery account.
     * @returns DeliveryAccount
     * @throws ApiError
     */
    public static updateDeliveryAccountsUseForImagesFlag(data: UpdateDeliveryAccountsUseForImagesFlagData): CancelablePromise<UpdateDeliveryAccountsUseForImagesFlagResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/linked_accounts/{id}/toggle_use_for_images/',
            path: {
                id: data.id
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Verify email otp
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this delivery account.
     * @param data.requestBody
     * @returns void No response body
     * @throws ApiError
     */
    public static verifyEmailOtp(data: VerifyEmailOtpData): CancelablePromise<VerifyEmailOtpResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v2/linked_accounts/{id}/verify_otp/',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * send_test_mail
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown No response body
     * @throws ApiError
     */
    public static sendTestMail(data: SendTestMailData): CancelablePromise<SendTestMailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/linked_accounts/send_test_mail/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
}

export class MergeHistoryService {
    /**
     * Get created documents merge history
     * @param data The data for the request.
     * @param data.endDate
     * @param data.ordering Which field to use when ordering the results.
     * @param data.page A page number within the paginated result set.
     * @param data.startDate
     * @param data.status
     * @param data.template
     * @returns PaginatedDocumentMergeHistoryList
     * @throws ApiError
     */
    public static getCreatedDocumentsMergeHistory(data: GetCreatedDocumentsMergeHistoryData = {}): CancelablePromise<GetCreatedDocumentsMergeHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/merge_history/',
            query: {
                end_date: data.endDate,
                ordering: data.ordering,
                page: data.page,
                start_date: data.startDate,
                status: data.status,
                template: data.template
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
}

export class PermissionsService {
    /**
     * Returns folder permissions
     * @param data The data for the request.
     * @param data.ids
     * @returns unknown
     * @throws ApiError
     */
    public static getFolderPermissions(data: GetFolderPermissionsData = {}): CancelablePromise<GetFolderPermissionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/permissions/folder/',
            query: {
                ids: data.ids
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Returns permission for each role
     * @returns GlobalPermission
     * @throws ApiError
     */
    public static getGlobalPermissions(): CancelablePromise<GetGlobalPermissionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/permissions/global/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Returns template permissions
     * @param data The data for the request.
     * @param data.ids
     * @returns unknown
     * @throws ApiError
     */
    public static getTemplatePermissions(data: GetTemplatePermissionsData = {}): CancelablePromise<GetTemplatePermissionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/permissions/template/',
            query: {
                ids: data.ids
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
}

export class PersonalizationService {
    /**
     * @returns UserPersonalization
     * @throws ApiError
     */
    public static getUserPersonalization(): CancelablePromise<GetUserPersonalizationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/personalization/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static updateUserPersonalization(data: UpdateUserPersonalizationData = {}): CancelablePromise<UpdateUserPersonalizationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/personalization/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: ''
            }
        });
    }
    
}

export class SubscriptionService {
    /**
     * @returns ChargebeeSubscription
     * @throws ApiError
     */
    public static getSubscriptionDetails(): CancelablePromise<GetSubscriptionDetailsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/subscription/details/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Extend trial
     * @returns void No response body
     * @throws ApiError
     */
    public static extendTrial(): CancelablePromise<ExtendTrialResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/subscription/extend_trial/',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.planId
     * @returns unknown
     * @throws ApiError
     */
    public static getChargebeeHostedPage(data: GetChargebeeHostedPageData = {}): CancelablePromise<GetChargebeeHostedPageResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/subscription/hosted_page/',
            query: {
                plan_id: data.planId
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * @returns ChargebeeSubscription
     * @throws ApiError
     */
    public static getChargebeePortalSession(): CancelablePromise<GetChargebeePortalSessionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/subscription/portal_session/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns void No response body
     * @throws ApiError
     */
    public static subscriptionRenewRequestCreate(data: SubscriptionRenewRequestCreateData = {}): CancelablePromise<SubscriptionRenewRequestCreateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/subscription/renew_request/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static resumeSubscription(): CancelablePromise<ResumeSubscriptionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/subscription/resume/',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * @returns HostedPage
     * @throws ApiError
     */
    public static getChargebeeUnpaidInvoices(): CancelablePromise<GetChargebeeUnpaidInvoicesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/subscription/unpaid_invoices/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
}

export class TeamService {
    /**
     * List all team members
     * @param data The data for the request.
     * @param data.ordering Which field to use when ordering the results.
     * @param data.role
     * @returns TeamMember
     * @throws ApiError
     */
    public static listAllTeamMembers(data: ListAllTeamMembersData = {}): CancelablePromise<ListAllTeamMembersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/team/',
            query: {
                ordering: data.ordering,
                role: data.role
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * delete team member
     * @param data The data for the request.
     * @param data.id
     * @param data.transferTo
     * @returns void No response body
     * @throws ApiError
     */
    public static deleteTeamMember(data: DeleteTeamMemberData): CancelablePromise<DeleteTeamMemberResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/accounts/v2/team/{id}/',
            path: {
                id: data.id
            },
            query: {
                transfer_to: data.transferTo
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Change role of team member.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns TeamMember
     * @throws ApiError
     */
    public static changeRoleOfTeamMember(data: ChangeRoleOfTeamMemberData): CancelablePromise<ChangeRoleOfTeamMemberResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/accounts/v2/team/{id}/change_role/',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Transfer Ownership To Admin User
     * @param data The data for the request.
     * @param data.requestBody
     * @returns void No response body
     * @throws ApiError
     */
    public static transferOwnershipToAdminUser(data: TransferOwnershipToAdminUserData): CancelablePromise<TransferOwnershipToAdminUserResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/accounts/v2/team/transfer_ownership/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
}

export class TemplateDeliveryService {
    /**
     * Get deliveries configured under this template
     * @param data The data for the request.
     * @param data.templateId
     * @param data.ordering Which field to use when ordering the results.
     * @returns TemplateDelivery
     * @throws ApiError
     */
    public static listTemplateDeliveries(data: ListTemplateDeliveriesData): CancelablePromise<ListTemplateDeliveriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/{template_id}/deliveries/',
            path: {
                template_id: data.templateId
            },
            query: {
                ordering: data.ordering
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Create delivery
     * @param data The data for the request.
     * @param data.templateId
     * @param data.requestBody
     * @returns PolymorphicDelivery
     * @throws ApiError
     */
    public static createTemplateDelivery(data: CreateTemplateDeliveryData): CancelablePromise<CreateTemplateDeliveryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/templates/{template_id}/deliveries/',
            path: {
                template_id: data.templateId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Get delivery
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this delivery.
     * @param data.templateId
     * @returns PolymorphicDelivery
     * @throws ApiError
     */
    public static retrieveTemplateDelivery(data: RetrieveTemplateDeliveryData): CancelablePromise<RetrieveTemplateDeliveryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/{template_id}/deliveries/{id}/',
            path: {
                id: data.id,
                template_id: data.templateId
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Update delivery
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this delivery.
     * @param data.templateId
     * @param data.requestBody
     * @returns PolymorphicDelivery
     * @throws ApiError
     */
    public static updateTemplateDelivery(data: UpdateTemplateDeliveryData): CancelablePromise<UpdateTemplateDeliveryResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v2/templates/{template_id}/deliveries/{id}/',
            path: {
                id: data.id,
                template_id: data.templateId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Delete delivery
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this delivery.
     * @param data.templateId
     * @returns void No response body
     * @throws ApiError
     */
    public static deleteTemplateDelivery(data: DeleteTemplateDeliveryData): CancelablePromise<DeleteTemplateDeliveryResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v2/templates/{template_id}/deliveries/{id}/',
            path: {
                id: data.id,
                template_id: data.templateId
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * upload email delivery attachments
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this delivery.
     * @param data.templateId
     * @param data.formData
     * @returns PolymorphicDelivery
     * @throws ApiError
     */
    public static uploadDeliveryAttachments(data: UploadDeliveryAttachmentsData): CancelablePromise<UploadDeliveryAttachmentsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/templates/{template_id}/deliveries/{id}/attachments/',
            path: {
                id: data.id,
                template_id: data.templateId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                400: '',
                401: '',
                403: '',
                404: '',
                413: ''
            }
        });
    }
    
    /**
     * download delivery attachment
     * @param data The data for the request.
     * @param data.attachmentId
     * @param data.id A unique integer value identifying this delivery.
     * @param data.templateId
     * @returns binary
     * @throws ApiError
     */
    public static downloadDeliveryAttachment(data: DownloadDeliveryAttachmentData): CancelablePromise<DownloadDeliveryAttachmentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/{template_id}/deliveries/{id}/attachments/{attachment_id}/',
            path: {
                attachment_id: data.attachmentId,
                id: data.id,
                template_id: data.templateId
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * delete email delivery attachment
     * @param data The data for the request.
     * @param data.attachmentId
     * @param data.id A unique integer value identifying this delivery.
     * @param data.templateId
     * @returns void No response body
     * @throws ApiError
     */
    public static deleteDeliveryAttachment(data: DeleteDeliveryAttachmentData): CancelablePromise<DeleteDeliveryAttachmentResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v2/templates/{template_id}/deliveries/{id}/attachments/{attachment_id}/',
            path: {
                attachment_id: data.attachmentId,
                id: data.id,
                template_id: data.templateId
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Upgrade docusign delivery api version
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this delivery.
     * @param data.templateId
     * @returns PolymorphicDelivery
     * @throws ApiError
     */
    public static upgradeDocusignDelivery(data: UpgradeDocusignDeliveryData): CancelablePromise<UpgradeDocusignDeliveryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/templates/{template_id}/deliveries/{id}/upgrade_docusign/',
            path: {
                id: data.id,
                template_id: data.templateId
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
}

export class TemplatesService {
    /**
     * Get list of templates
     * @param data The data for the request.
     * @param data.folder
     * @param data.ordering Which field to use when ordering the results.
     * @param data.outputType
     * @param data.page A page number within the paginated result set.
     * @param data.search A search term.
     * @param data.status
     * @param data.type
     * @returns PaginatedTemplateList
     * @throws ApiError
     */
    public static listTemplates(data: ListTemplatesData = {}): CancelablePromise<ListTemplatesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/',
            query: {
                folder: data.folder,
                ordering: data.ordering,
                output_type: data.outputType,
                page: data.page,
                search: data.search,
                status: data.status,
                type: data.type
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Create template
     * @param data The data for the request.
     * @param data.formData
     * @returns Template
     * @throws ApiError
     */
    public static createTemplate(data: CreateTemplateData): CancelablePromise<CreateTemplateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/templates/',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                400: '',
                401: '',
                403: '',
                413: ''
            }
        });
    }
    
    /**
     * Get one template
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this document.
     * @returns Template
     * @throws ApiError
     */
    public static getTemplate(data: GetTemplateData): CancelablePromise<GetTemplateResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/{id}/',
            path: {
                id: data.id
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Update template
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this document.
     * @param data.requestBody
     * @returns Template
     * @throws ApiError
     */
    public static updateTemplate(data: UpdateTemplateData): CancelablePromise<UpdateTemplateResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v2/templates/{id}/',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Update template content
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this document.
     * @param data.formData
     * @returns Template
     * @throws ApiError
     */
    public static updateTemplateContent(data: UpdateTemplateContentData): CancelablePromise<UpdateTemplateContentResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v2/templates/{id}/',
            path: {
                id: data.id
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                400: '',
                401: '',
                403: '',
                404: '',
                413: ''
            }
        });
    }
    
    /**
     * Move template to trash
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this document.
     * @returns void No response body
     * @throws ApiError
     */
    public static trashTemplate(data: TrashTemplateData): CancelablePromise<TrashTemplateResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v2/templates/{id}/',
            path: {
                id: data.id
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Copy template including preferences, deliveries
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this document.
     * @param data.requestBody
     * @returns Template
     * @throws ApiError
     */
    public static copyTemplate(data: CopyTemplateData): CancelablePromise<CopyTemplateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/templates/{id}/copy/',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Download template file
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this document.
     * @returns binary
     * @throws ApiError
     */
    public static downloadTemplateFile(data: DownloadTemplateFileData): CancelablePromise<DownloadTemplateFileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/{id}/download/',
            path: {
                id: data.id
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Upload inline image of template
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this document.
     * @param data.formData
     * @returns unknown No response body
     * @throws ApiError
     */
    public static uploadInlineImageOfTemplate(data: UploadInlineImageOfTemplateData): CancelablePromise<UploadInlineImageOfTemplateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/templates/{id}/inline_image/',
            path: {
                id: data.id
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                400: '',
                401: '',
                403: '',
                404: '',
                413: ''
            }
        });
    }
    
    /**
     * Delete a template permanently from trash
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this document.
     * @returns void No response body
     * @throws ApiError
     */
    public static deleteTemplatePermanently(data: DeleteTemplatePermanentlyData): CancelablePromise<DeleteTemplatePermanentlyResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v2/templates/{id}/permanent_delete/',
            path: {
                id: data.id
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Restore a template from trash
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this document.
     * @param data.requestBody
     * @returns Template
     * @throws ApiError
     */
    public static restoreTemplateFromTrash(data: RestoreTemplateFromTrashData): CancelablePromise<RestoreTemplateFromTrashResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v2/templates/{id}/restore/',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Get template schema
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this document.
     * @returns TemplateSchema
     * @throws ApiError
     */
    public static getTemplateSchema(data: GetTemplateSchemaData): CancelablePromise<GetTemplateSchemaResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/{id}/schema/',
            path: {
                id: data.id
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Get template split schema
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this document.
     * @returns Template
     * @throws ApiError
     */
    public static getDetailedTemplateSchema(data: GetDetailedTemplateSchemaData): CancelablePromise<GetDetailedTemplateSchemaResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/{id}/schema/detail/',
            path: {
                id: data.id
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Get all shared permissions for specific template
     * @param data The data for the request.
     * @param data.templateId
     * @returns TemplateSharing
     * @throws ApiError
     */
    public static listTemplateSharing(data: ListTemplateSharingData): CancelablePromise<ListTemplateSharingResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/{template_id}/permissions/',
            path: {
                template_id: data.templateId
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Create template sharing permission
     * @param data The data for the request.
     * @param data.templateId
     * @param data.requestBody
     * @returns TemplateSharing
     * @throws ApiError
     */
    public static createTemplateSharingPermission(data: CreateTemplateSharingPermissionData): CancelablePromise<CreateTemplateSharingPermissionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/templates/{template_id}/permissions/',
            path: {
                template_id: data.templateId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Get specific permission details for given template
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this template sharing setting.
     * @param data.templateId
     * @returns TemplateSharing
     * @throws ApiError
     */
    public static getTemplateSharing(data: GetTemplateSharingData): CancelablePromise<GetTemplateSharingResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/{template_id}/permissions/{id}/',
            path: {
                id: data.id,
                template_id: data.templateId
            },
            errors: {
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Update template content partially
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this template sharing setting.
     * @param data.templateId
     * @param data.requestBody
     * @returns TemplateSharing
     * @throws ApiError
     */
    public static updateTemplateSharingPermissionContent(data: UpdateTemplateSharingPermissionContentData): CancelablePromise<UpdateTemplateSharingPermissionContentResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v2/templates/{template_id}/permissions/{id}/',
            path: {
                id: data.id,
                template_id: data.templateId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * Revoke template sharing permission
     * @param data The data for the request.
     * @param data.id A unique integer value identifying this template sharing setting.
     * @param data.templateId
     * @returns void No response body
     * @throws ApiError
     */
    public static revokeTemplateSharingPermission(data: RevokeTemplateSharingPermissionData): CancelablePromise<RevokeTemplateSharingPermissionResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v2/templates/{template_id}/permissions/{id}/',
            path: {
                id: data.id,
                template_id: data.templateId
            },
            errors: {
                400: '',
                401: '',
                403: '',
                404: ''
            }
        });
    }
    
    /**
     * List all templates
     * Will return all templates without pagination, excluding templates in trashed
     * @returns Template
     * @throws ApiError
     */
    public static listAllTemplates(): CancelablePromise<ListAllTemplatesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/all/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Get the count of templates created by the user.
     * @param data The data for the request.
     * @param data.ownerId Owner Id of resource
     * @returns TemplateCount
     * @throws ApiError
     */
    public static getUserCreatedTemplatesCount(data: GetUserCreatedTemplatesCountData): CancelablePromise<GetUserCreatedTemplatesCountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/count/',
            query: {
                owner_id: data.ownerId
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Move templates to another folder
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Template
     * @throws ApiError
     */
    public static moveTemplatesToAnotherFolder(data: MoveTemplatesToAnotherFolderData): CancelablePromise<MoveTemplatesToAnotherFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v2/templates/move/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * @returns SharingInfoTemplate
     * @throws ApiError
     */
    public static templatesSharingStatusRetrieve(): CancelablePromise<TemplatesSharingStatusRetrieveResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/sharing_status/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * List all templates in trash.
     * @returns Template
     * @throws ApiError
     */
    public static listTrashedTemplates(): CancelablePromise<ListTrashedTemplatesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v2/templates/trash/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
}

export class UsersService {
    /**
     * Initiate a re-authorization sequence that would verify authenticity of logged-in userin order to allow performing high security operations like delete workspace
     * @param data The data for the request.
     * @param data.requestBody
     * @returns void No response body
     * @throws ApiError
     */
    public static initiateAuthorizationSequence(data: InitiateAuthorizationSequenceData = {}): CancelablePromise<InitiateAuthorizationSequenceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/users/initiate_authorization_sequence/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: ''
            }
        });
    }
    
    /**
     * get logged in user details
     * @returns User
     * @throws ApiError
     */
    public static getMe(): CancelablePromise<GetMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/users/me/',
            errors: {
                401: ''
            }
        });
    }
    
    /**
     * Update User Profile
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown No response body
     * @throws ApiError
     */
    public static updateUserProfile(data: UpdateUserProfileData = {}): CancelablePromise<UpdateUserProfileResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/accounts/v2/users/update_user_profile/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
}

export class UserSatisfactionSurveyService {
    /**
     * Redirect to G2 Review Page
     * @throws ApiError
     */
    public static g2Review(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/user_satisfaction_survey/g2_review/',
            errors: {
                302: 'No response body',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Update the next NPS reminder time
     * @param data The data for the request.
     * @param data.requestBody
     * @returns void No response body
     * @throws ApiError
     */
    public static npsNextReminder(data: NpsNextReminderData): CancelablePromise<NpsNextReminderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/user_satisfaction_survey/nps_next_reminder/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Update NPS rating
     * @param data The data for the request.
     * @param data.requestBody
     * @returns void No response body
     * @throws ApiError
     */
    public static npsRating(data: NpsRatingData = {}): CancelablePromise<NpsRatingResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/user_satisfaction_survey/nps_rating/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Save customer feedback
     * @param data The data for the request.
     * @param data.requestBody
     * @returns void No response body
     * @throws ApiError
     */
    public static saveCustomerFeedback(data: SaveCustomerFeedbackData): CancelablePromise<SaveCustomerFeedbackResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/user_satisfaction_survey/save_user_feedback/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Show survey prompt
     * @returns SurveyPrompt
     * @throws ApiError
     */
    public static showSurveyPrompt(): CancelablePromise<ShowSurveyPromptResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/user_satisfaction_survey/show_survey_prompt/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Update g2_review_updated_on
     * @returns void No response body
     * @throws ApiError
     */
    public static updateG2ReviewUpdatedOn(): CancelablePromise<UpdateG2ReviewUpdatedOnResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/user_satisfaction_survey/update_g2_review_updated_on/',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
}

export class WorkspacesService {
    /**
     * Get list of Workspaces
     * @param data The data for the request.
     * @param data.ordering Which field to use when ordering the results.
     * @param data.search A search term.
     * @returns Workspace
     * @throws ApiError
     */
    public static listWorkspaces(data: ListWorkspacesData = {}): CancelablePromise<ListWorkspacesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/workspaces/',
            query: {
                ordering: data.ordering,
                search: data.search
            },
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Create Workspace
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Workspace
     * @throws ApiError
     */
    public static createWorkspace(data: CreateWorkspaceData): CancelablePromise<CreateWorkspaceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/workspaces/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Returns csm details for given workspace
     * @returns CSMDetails
     * @throws ApiError
     */
    public static getCsmDetails(): CancelablePromise<GetCsmDetailsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/workspaces/csm_details/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * get current workspace details
     * @returns Workspace
     * @throws ApiError
     */
    public static getCurrentWorkspace(): CancelablePromise<GetCurrentWorkspaceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/workspaces/current/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * update current workspace details
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PatchedWorkspace
     * @throws ApiError
     */
    public static updateCurrentWorkspace(data: UpdateCurrentWorkspaceData = {}): CancelablePromise<UpdateCurrentWorkspaceResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/accounts/v2/workspaces/current/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * Delete a workspace and other related data permanently
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown No response body
     * @throws ApiError
     */
    public static deleteCurrentWorkspace(data: DeleteCurrentWorkspaceData): CancelablePromise<DeleteCurrentWorkspaceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/accounts/v2/workspaces/current/delete/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * get workspace data retention preference
     * @returns RetentionPreference
     * @throws ApiError
     */
    public static getWorkspaceDataRetentionPreference(): CancelablePromise<GetWorkspaceDataRetentionPreferenceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/accounts/v2/workspaces/retention_preference/',
            errors: {
                401: '',
                403: ''
            }
        });
    }
    
    /**
     * update workspace data retention preference
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RetentionPreference
     * @throws ApiError
     */
    public static updateWorkspaceDataRetentionPreference(data: UpdateWorkspaceDataRetentionPreferenceData = {}): CancelablePromise<UpdateWorkspaceDataRetentionPreferenceResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/accounts/v2/workspaces/retention_preference/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '',
                401: '',
                403: ''
            }
        });
    }
    
}