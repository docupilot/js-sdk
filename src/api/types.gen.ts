import { OmitReadonly } from '../utils/OmitReadonly';
// This file is auto-generated by @hey-api/openapi-ts

export type AcceptInvite = {
    workspace_unique_key: string;
};

export type AccountDelivery = {
    readonly id: number;
    name: string;
    last_used_on?: (string) | null;
    template_info: TemplateInfo;
};


export type AITemplateCreate = {
    ai_prompt: string;
    title: string;
    description?: (string) | null;
    folder?: (number) | null;
};

export type AITemplateEdit = {
    ai_prompt: string;
    selected_content: string;
    readonly ai_response: string;
};

export type AppendFiles = {
    files: Array<((Blob | File))>;
    output_file_name?: string;
};

export type AttachmentsConfig = {
    allowed_types: string;
    max_files: number;
    max_total_size: number;
};

export type AuthToken = {
    readonly id: number;
    readonly token: string;
    name: string;
    readonly created_time: string;
    readonly last_used_time: (string) | null;
    active?: boolean;
};

export type BannerNotification = {
    id: string;
    content: string;
    action: BannerNotificationAction;
};

export type BannerNotificationAction = {
    text: string;
    attributes: {
        [key: string]: unknown;
    };
};

export type BulkGen = {
    readonly id: number;
    readonly errors: Array<BulkGenTask>;
    readonly file_name: string;
    status?: 0 | 1 | 2 | 3 | 4 | 5;
    start_time?: (string) | null;
    end_time?: (string) | null;
    total?: (number) | null;
    success?: (number) | null;
    readonly updated_time: string;
    readonly created_by: number;
    readonly updated_by: (number) | null;
};

export type status = 0 | 1 | 2 | 3 | 4 | 5;

export type BulkGenData = {
    id: number;
    data: {
        [key: string]: unknown;
    };
    row_count: number;
    suggested_mapping: {
        [key: string]: unknown;
    };
};

export type BulkGenerateMeta = {
    max_test_rows: number;
};

export type BulkGenTask = {
    status_message?: (string) | null;
};

export type BulkGenUpload = {
    file: (Blob | File);
};

export type ChangeRole = {
    role: 'owner' | 'admin' | 'manager' | 'member' | 'billing_manager';
};

export type role = 'owner' | 'admin' | 'manager' | 'member' | 'billing_manager';

export type ChargebeeSubscription = {
    plan_id?: (string) | null;
    status?: 'a' | 't' | 'e' | 'c' | 'p';
    trial_end?: string;
    billing_period_unit?: (string) | null;
    readonly current_term_start: string;
    readonly current_term_end: string;
    unpaid_invoices?: number;
    max_allowed_unpaid_invoices?: number;
    overage_enabled: boolean;
    documents_allowed?: number;
    documents_created?: number;
    readonly can_extend_trial: boolean;
    readonly subscribed_on: string;
};

export type status2 = 'a' | 't' | 'e' | 'c' | 'p';

export type ChatThreads = {
    readonly id: number;
    thread_id: string;
    thread_name?: (string) | null;
    tokens_used?: number;
    model_name: string;
};

export type ChildTemplate = {
    readonly id: number;
    readonly title: string;
    description?: (string) | null;
    type?: 'docx' | 'html' | 'fillable_pdf' | 'pptx' | 'xlsx' | 'g_document' | 'g_presentation' | 'g_spreadsheet';
    readonly created_time: string;
    readonly updated_time: string;
    document_status?: 'active' | 'test';
    deleted_time?: (string) | null;
    readonly created_by: number;
    readonly updated_by: (number) | null;
    folder?: (number) | null;
};

export type type = 'docx' | 'html' | 'fillable_pdf' | 'pptx' | 'xlsx' | 'g_document' | 'g_presentation' | 'g_spreadsheet';

export type document_status = 'active' | 'test';

export type CopyTemplate = {
    title: string;
};

export type CreateCustomerThreadInput = {
    message: string;
};

export type CreateCustomerThreadOutput = {
    output_message: string;
    thread_id: number;
    thread_display_name: string;
};

export type CSMDetails = {
    name: string;
    phone_number: string;
};

export type DeleteCurrentWorkspace = {
    otp: string;
};

export type DeliveryAccount = {
    readonly id: number;
    type: 'hellosign' | 'aws_s3' | 'signable' | 'yousign' | 'email' | 'sftp';
    readonly sub_type: string;
    readonly used_by: number;
    readonly name: (string) | null;
    credentials: {
        [key: string]: unknown;
    };
    readonly is_expired: boolean;
    readonly updated_at: string;
    use_for_images?: boolean;
};

export type type2 = 'hellosign' | 'aws_s3' | 'signable' | 'yousign' | 'email' | 'sftp';

export type DocumentMergeLink = {
    readonly path: string;
};

export type DocuSignDelivery = {
    readonly id: number;
    failure_email_recipients?: (string) | null;
    account: number;
    custom_tags?: {
        [key: string]: {
            [key: string]: Array<{
                [key: string]: unknown;
            }>;
        };
    } | null;
    signers: Array<{
        order?: string;
        recipient_type: 'signer' | 'agent' | 'cc' | 'editor';
        name: string;
        is_email_delivery: boolean;
        is_sms_delivery: boolean;
        email_address?: string;
        country_code?: string;
        phone_number?: string;
    }>;
    reminder_settings?: {
        reminder_delay: number;
        reminder_frequency: number;
    } | null;
    overwrite_account_defaults?: boolean;
    name: string;
    type?: 'docu_sign';
    success_callback_url?: (string) | null;
    success_callback_payload?: {
        [key: string]: unknown;
    } | null;
    success_callback_headers?: {
        [key: string]: unknown;
    } | null;
    last_used_on?: (string) | null;
    subject?: (string) | null;
    message?: (string) | null;
    fullname_anchor_tags?: boolean;
    sequenced_signing?: boolean;
    expire_after?: (number) | null;
    enable_optional_signers?: boolean;
    readonly api_version: '2.0' | '2.1';
    folder_id?: (string) | null;
    folder_name?: (string) | null;
    allow_reassign?: boolean;
};

export type api_version = '2.0' | '2.1';

export type Domain = {
    readonly id: number;
    domain_name: string;
    txt_record: string;
    is_txt_verified?: boolean;
    is_spf_verified?: boolean;
    readonly spf_record: string;
};

export type DomainFailure = {
    spf_record: string;
    txt_record: string;
};

export type DomainVerify = {
    success: Array<('txt_record' | 'spf_record')>;
    failures: DomainFailure;
};

export type DropboxDelivery = {
    readonly id: number;
    failure_email_recipients?: (string) | null;
    account: number;
    name: string;
    type?: 'dropbox';
    success_callback_url?: (string) | null;
    success_callback_payload?: {
        [key: string]: unknown;
    } | null;
    success_callback_headers?: {
        [key: string]: unknown;
    } | null;
    last_used_on?: (string) | null;
    folder?: string;
    mode?: 'add_as_new' | 'conflict' | 'overwrite';
};

export type mode = 'add_as_new' | 'conflict' | 'overwrite';

export type DynamicImage = {
    token: string;
    page?: number;
    left: number;
    top: number;
    width: number;
    height: number;
};

export type EmailDelivery = {
    readonly id: number;
    failure_email_recipients?: (string) | null;
    account: (number) | null;
    readonly attachments: Array<File>;
    name: string;
    type?: 'email';
    success_callback_url?: (string) | null;
    success_callback_payload?: {
        [key: string]: unknown;
    } | null;
    success_callback_headers?: {
        [key: string]: unknown;
    } | null;
    last_used_on?: (string) | null;
    from_email?: (string) | null;
    to_email: Array<(string)>;
    cc?: Array<(string)>;
    bcc?: Array<(string)>;
    headers?: {
        [key: string]: unknown;
    } | null;
    subject?: string;
    body?: string;
    enable_optional_recipients?: boolean;
};

export type EmailDeliveryAttachment = {
    attachments: Array<((Blob | File))>;
};

export type EversignDelivery = {
    readonly id: number;
    failure_email_recipients?: (string) | null;
    account: number;
    signers: Array<{
        pin?: string;
        name: string;
        email: string;
        order?: string;
    }>;
    recipients?: Array<{
        name: string;
        email: string;
    }> | null;
    name: string;
    type?: 'eversign';
    success_callback_url?: (string) | null;
    success_callback_payload?: {
        [key: string]: unknown;
    } | null;
    success_callback_headers?: {
        [key: string]: unknown;
    } | null;
    last_used_on?: (string) | null;
    title?: (string) | null;
    message?: (string) | null;
    use_signer_order?: boolean;
    reminders?: boolean;
    require_all_signers?: boolean;
    expires_in?: (number) | null;
    enable_optional_signers?: boolean;
};

export type ExportMergeHistory = {
    readonly id: number;
    readonly name: string;
    from_date: string;
    to_date: string;
    status?: 'pending' | 'success' | 'error';
};

export type status3 = 'pending' | 'success' | 'error';

export type File = {
    readonly id: number;
    path: string;
    name: string;
    tag: string;
    readonly size: number;
};

export type FileUploadMeta = {
    email_attachments: AttachmentsConfig;
};

export type FillablePdfSettings = {
    width: number;
    height: number;
    no_of_pages: number;
    dynamic_images?: {
        [key: string]: unknown;
    } | null;
};

export type Folder = {
    readonly id: number;
    name: string;
    readonly created_time: string;
    readonly updated_time: string;
    readonly created_by: number;
    readonly updated_by: (number) | null;
};

export type FolderCount = {
    folders_count: number;
};

export type FolderSharing = {
    readonly id: number;
    permission?: 'read' | 'write' | 'manage';
    user: number;
};

export type permission = 'read' | 'write' | 'manage';

export type ForbiddenError = {
    detail: string;
};

export type GalleryCategory = {
    readonly id: number;
    name: string;
};

export type GlobalPermission = {
    templates: boolean;
    folders: boolean;
    workspace: boolean;
    'workspace:update': boolean;
    'workspace:delete': boolean;
    billing: boolean;
    'team:manage': boolean;
    integrations: boolean;
    reports: boolean;
    api_settings: boolean;
};

export type GoogleDriveDelivery = {
    readonly id: number;
    failure_email_recipients?: (string) | null;
    account: number;
    name: string;
    type?: 'google_drive';
    success_callback_url?: (string) | null;
    success_callback_payload?: {
        [key: string]: unknown;
    } | null;
    success_callback_headers?: {
        [key: string]: unknown;
    } | null;
    last_used_on?: (string) | null;
    /**
     * Base folder name
     */
    folder?: string;
    /**
     * Base folder id
     */
    folder_id?: (string) | null;
    /**
     * Dynamic folder path
     */
    path?: (string) | null;
};

export type GoogleDrivePickerPayload = {
    payload: string;
};

export type HelloSignDelivery = {
    readonly id: number;
    failure_email_recipients?: (string) | null;
    account: number;
    signers: Array<{
        name: string;
        email_address: string;
    }>;
    name: string;
    type?: 'hellosign';
    success_callback_url?: (string) | null;
    success_callback_payload?: {
        [key: string]: unknown;
    } | null;
    success_callback_headers?: {
        [key: string]: unknown;
    } | null;
    last_used_on?: (string) | null;
    title?: (string) | null;
    subject?: (string) | null;
    message?: (string) | null;
    cc?: Array<(string)>;
    use_text_tags?: boolean;
    hide_text_tags?: boolean;
    sequenced_signing?: boolean;
    enable_optional_signers?: boolean;
};

export type HostedPage = {
    url: string;
};

export type InitiateAuthorizationSequence = {
    action_name?: 'delete workspace' | 'transfer ownership';
};

export type action_name = 'delete workspace' | 'transfer ownership';

export type Invitation = {
    readonly id: number;
    readonly workspace: string;
    readonly sender: string;
    readonly expired: string;
    email: string;
    role: 'admin' | 'manager' | 'member' | 'billing_manager';
    readonly created_at: string;
    readonly expires_at: string;
    readonly accepted_at: (string) | null;
    readonly is_accepted: boolean;
    readonly invite_key: string;
};

export type role2 = 'admin' | 'manager' | 'member' | 'billing_manager';

export type MergeHistory = {
    readonly id: number;
    readonly template: ((ChildTemplate) | null);
    data: {
        [key: string]: unknown;
    };
    data_expired: boolean;
    document_expired: boolean;
    delivery_type: string;
    status: 'pending' | 'success' | 'error';
    readonly created_time: string;
    created_file_name: string;
    message?: {
        [key: string]: unknown;
    } | null;
    mode?: (string) | null;
    callback_status?: ('success' | 'fail') | null;
    callback_failure_message?: (string) | null;
    delivery?: (number) | null;
};

export type callback_status = 'success' | 'fail';

export type Meta = {
    file_uploads: FileUploadMeta;
    batch_process_max_allowed_test_rows: BulkGenerateMeta;
    iam: string;
};

export type MoveTemplate = {
    template_ids: Array<(number)>;
    new_folder_id: (number) | null;
};

export type NewTemplate = {
    file?: (Blob | File);
    folder?: (number) | null;
    title: string;
    output_type: 'html' | 'pdf' | 'jpeg' | 'png' | 'docx' | 'pptx' | 'xlsx';
    description?: (string) | null;
    template_gallery_id?: number;
};

export type output_type = 'html' | 'pdf' | 'jpeg' | 'png' | 'docx' | 'pptx' | 'xlsx';

export type NotFoundError = {
    detail: string;
};

export type NpsNextReminder = {
    days: number;
};

export type NpsRating = {
    nps_rating?: (number) | null;
};

export type OneDriveDelivery = {
    readonly id: number;
    failure_email_recipients?: (string) | null;
    account: number;
    name: string;
    type?: 'one_drive';
    success_callback_url?: (string) | null;
    success_callback_payload?: {
        [key: string]: unknown;
    } | null;
    success_callback_headers?: {
        [key: string]: unknown;
    } | null;
    last_used_on?: (string) | null;
    folder?: string;
};

export type PaginatedAccountDeliveryList = {
    count?: number;
    next?: (string) | null;
    previous?: (string) | null;
    results?: Array<AccountDelivery>;
};

export type PaginatedBulkGenList = {
    count?: number;
    next?: (string) | null;
    previous?: (string) | null;
    results?: Array<BulkGen>;
};

export type PaginatedMergeHistoryList = {
    count?: number;
    next?: (string) | null;
    previous?: (string) | null;
    results?: Array<MergeHistory>;
};

export type PaginatedTemplateList = {
    count?: number;
    next?: (string) | null;
    previous?: (string) | null;
    results?: Array<Template>;
};

export type PatchedDomain = {
    readonly id?: number;
    domain_name?: string;
    txt_record?: string;
    is_txt_verified?: boolean;
    is_spf_verified?: boolean;
    readonly spf_record?: string;
};

export type PatchedUpdateFolderSharing = {
    readonly id?: number;
    permission?: 'read' | 'write' | 'manage';
    readonly user?: number;
};

export type PatchedUpdateNewTemplate = {
    file?: (Blob | File);
};

export type PatchedUpdateTemplateSharing = {
    readonly id?: number;
    permission?: 'read' | 'write' | 'manage';
    readonly user?: number;
};

export type PatchedUpdateUser = {
    locale?: (string) | null;
    theme?: 'light' | 'dark' | 'system';
};

export type theme = 'light' | 'dark' | 'system';

export type PatchedWorkspace = {
    readonly id?: number;
    org_name?: string;
    readonly unique_key?: string;
    readonly role?: string;
    readonly timezone?: 'Pacific/Midway' | 'America/Adak' | 'Pacific/Honolulu' | 'Pacific/Marquesas' | 'America/Anchorage' | 'America/Tijuana' | 'America/Los_Angeles' | 'America/Phoenix' | 'America/Chihuahua' | 'America/Denver' | 'America/Belize' | 'America/Chicago' | 'Pacific/Easter' | 'America/Mexico_City' | 'America/Regina' | 'America/Bogota' | 'America/Cancun' | 'America/New_York' | 'America/Port-au-Prince' | 'America/Havana' | 'America/Indiana/Indianapolis' | 'America/Asuncion' | 'America/Halifax' | 'America/Caracas' | 'America/Cuiaba' | 'America/Manaus' | 'America/Santiago' | 'America/Grand_Turk' | 'America/St_Johns' | 'America/Fortaleza' | 'America/Sao_Paulo' | 'America/Cayenne' | 'America/Buenos_Aires' | 'America/Godthab' | 'America/Montevideo' | 'America/Miquelon' | 'America/Bahia' | 'America/Noronha' | 'Atlantic/Azores' | 'Atlantic/Cape_Verde' | 'UTC' | 'Africa/Casablanca' | 'Europe/London' | 'Africa/Monrovia' | 'Europe/Amsterdam' | 'Europe/Belgrade' | 'Europe/Brussels' | 'Europe/Warsaw' | 'Africa/Algiers' | 'Africa/Windhoek' | 'Asia/Amman' | 'Europe/Athens' | 'Asia/Beirut' | 'Africa/Cairo' | 'Asia/Damascus' | 'Asia/Gaza' | 'Africa/Harare' | 'Europe/Helsinki' | 'Asia/Jerusalem' | 'Europe/Kaliningrad' | 'Africa/Tripoli' | 'Asia/Baghdad' | 'Asia/Istanbul' | 'Asia/Kuwait' | 'Europe/Minsk' | 'Europe/Moscow' | 'Africa/Nairobi' | 'Asia/Tehran' | 'Asia/Muscat' | 'Europe/Astrakhan' | 'Asia/Baku' | 'Europe/Samara' | 'Indian/Mauritius' | 'Asia/Tbilisi' | 'Asia/Yerevan' | 'Asia/Kabul' | 'Asia/Tashkent' | 'Asia/Yekaterinburg' | 'Asia/Karachi' | 'Asia/Kolkata' | 'Asia/Colombo' | 'Asia/Katmandu' | 'Asia/Almaty' | 'Asia/Dhaka' | 'Asia/Rangoon' | 'Asia/Novosibirsk' | 'Asia/Bangkok' | 'Asia/Barnaul' | 'Asia/Hovd' | 'Asia/Krasnoyarsk' | 'Asia/Tomsk' | 'Asia/Chongqing' | 'Asia/Irkutsk' | 'Asia/Kuala_Lumpur' | 'Australia/Perth' | 'Asia/Taipei' | 'Asia/Ulaanbaatar' | 'Asia/Pyongyang' | 'Australia/Eucla' | 'Asia/Chita' | 'Asia/Tokyo' | 'Asia/Seoul' | 'Asia/Yakutsk' | 'Australia/Adelaide' | 'Australia/Darwin' | 'Australia/Brisbane' | 'Australia/Canberra' | 'Pacific/Guam' | 'Australia/Hobart' | 'Asia/Vladivostok' | 'Australia/Lord_Howe' | 'Pacific/Bougainville' | 'Asia/Srednekolymsk' | 'Asia/Magadan' | 'Pacific/Norfolk' | 'Asia/Sakhalin' | 'Pacific/Guadalcanal' | 'Asia/Anadyr' | 'Pacific/Auckland' | 'Pacific/Fiji' | 'Pacific/Chatham' | 'Pacific/Tongatapu' | 'Pacific/Apia' | 'Pacific/Kiritimati';
    readonly plan_id?: (string) | null;
    readonly plan_status?: string;
    readonly active?: boolean;
    mfa_enforced?: boolean;
    readonly use_froala?: boolean;
    readonly created_time?: string;
};

export type timezone = 'Pacific/Midway' | 'America/Adak' | 'Pacific/Honolulu' | 'Pacific/Marquesas' | 'America/Anchorage' | 'America/Tijuana' | 'America/Los_Angeles' | 'America/Phoenix' | 'America/Chihuahua' | 'America/Denver' | 'America/Belize' | 'America/Chicago' | 'Pacific/Easter' | 'America/Mexico_City' | 'America/Regina' | 'America/Bogota' | 'America/Cancun' | 'America/New_York' | 'America/Port-au-Prince' | 'America/Havana' | 'America/Indiana/Indianapolis' | 'America/Asuncion' | 'America/Halifax' | 'America/Caracas' | 'America/Cuiaba' | 'America/Manaus' | 'America/Santiago' | 'America/Grand_Turk' | 'America/St_Johns' | 'America/Fortaleza' | 'America/Sao_Paulo' | 'America/Cayenne' | 'America/Buenos_Aires' | 'America/Godthab' | 'America/Montevideo' | 'America/Miquelon' | 'America/Bahia' | 'America/Noronha' | 'Atlantic/Azores' | 'Atlantic/Cape_Verde' | 'UTC' | 'Africa/Casablanca' | 'Europe/London' | 'Africa/Monrovia' | 'Europe/Amsterdam' | 'Europe/Belgrade' | 'Europe/Brussels' | 'Europe/Warsaw' | 'Africa/Algiers' | 'Africa/Windhoek' | 'Asia/Amman' | 'Europe/Athens' | 'Asia/Beirut' | 'Africa/Cairo' | 'Asia/Damascus' | 'Asia/Gaza' | 'Africa/Harare' | 'Europe/Helsinki' | 'Asia/Jerusalem' | 'Europe/Kaliningrad' | 'Africa/Tripoli' | 'Asia/Baghdad' | 'Asia/Istanbul' | 'Asia/Kuwait' | 'Europe/Minsk' | 'Europe/Moscow' | 'Africa/Nairobi' | 'Asia/Tehran' | 'Asia/Muscat' | 'Europe/Astrakhan' | 'Asia/Baku' | 'Europe/Samara' | 'Indian/Mauritius' | 'Asia/Tbilisi' | 'Asia/Yerevan' | 'Asia/Kabul' | 'Asia/Tashkent' | 'Asia/Yekaterinburg' | 'Asia/Karachi' | 'Asia/Kolkata' | 'Asia/Colombo' | 'Asia/Katmandu' | 'Asia/Almaty' | 'Asia/Dhaka' | 'Asia/Rangoon' | 'Asia/Novosibirsk' | 'Asia/Bangkok' | 'Asia/Barnaul' | 'Asia/Hovd' | 'Asia/Krasnoyarsk' | 'Asia/Tomsk' | 'Asia/Chongqing' | 'Asia/Irkutsk' | 'Asia/Kuala_Lumpur' | 'Australia/Perth' | 'Asia/Taipei' | 'Asia/Ulaanbaatar' | 'Asia/Pyongyang' | 'Australia/Eucla' | 'Asia/Chita' | 'Asia/Tokyo' | 'Asia/Seoul' | 'Asia/Yakutsk' | 'Australia/Adelaide' | 'Australia/Darwin' | 'Australia/Brisbane' | 'Australia/Canberra' | 'Pacific/Guam' | 'Australia/Hobart' | 'Asia/Vladivostok' | 'Australia/Lord_Howe' | 'Pacific/Bougainville' | 'Asia/Srednekolymsk' | 'Asia/Magadan' | 'Pacific/Norfolk' | 'Asia/Sakhalin' | 'Pacific/Guadalcanal' | 'Asia/Anadyr' | 'Pacific/Auckland' | 'Pacific/Fiji' | 'Pacific/Chatham' | 'Pacific/Tongatapu' | 'Pacific/Apia' | 'Pacific/Kiritimati';

export type Plan = {
    readonly plan_id: string;
    readonly documents_allowed: number;
    readonly price: number;
    readonly billing_period_unit: 'year' | 'month';
};

export type billing_period_unit = 'year' | 'month';

export type PolymorphicDelivery = EmailDelivery | WebhookDelivery | DropboxDelivery | OneDriveDelivery | SignNowDelivery | GoogleDriveDelivery | S3Delivery | HelloSignDelivery | DocuSignDelivery | EversignDelivery | SignableDelivery | YouSignDelivery | SftpDelivery;

export type PromptSuggestions = {
    template_title: string;
    template_description?: (string) | null;
    readonly prompts: Array<(string)>;
};

export type RenewSubscription = {
    upgrade_message?: string;
};

export type RetentionPreference = {
    merge_data?: string;
    generated_document?: string;
};

export type S3Delivery = {
    readonly id: number;
    failure_email_recipients?: (string) | null;
    account: number;
    name: string;
    type?: 'aws_s3';
    success_callback_url?: (string) | null;
    success_callback_payload?: {
        [key: string]: unknown;
    } | null;
    success_callback_headers?: {
        [key: string]: unknown;
    } | null;
    last_used_on?: (string) | null;
    bucket: string;
    key_prefix?: (string) | null;
    region?: (string) | null;
};

export type SaveCustomerFeedback = {
    feedback: {
        challenges_faced: unknown[];
        feature_improvement?: string;
    };
};

export type SendEmailAccountAuthorizationOTP = {
    action_name: 'verify' | 'update';
    email?: (string) | null;
};

export type action_name2 = 'verify' | 'update';

export type SendTestSmtpMail = {
    smtp_server_address: string;
    smtp_server_username: string;
    smtp_server_password: string;
    smtp_port: number;
    smtp_encryption_type: 'TLS' | 'SSL';
    email: string;
};

export type smtp_encryption_type = 'TLS' | 'SSL';

export type SftpDelivery = {
    readonly id: number;
    failure_email_recipients?: (string) | null;
    account: number;
    name: string;
    type?: 'sftp';
    success_callback_url?: (string) | null;
    success_callback_payload?: {
        [key: string]: unknown;
    } | null;
    success_callback_headers?: {
        [key: string]: unknown;
    } | null;
    last_used_on?: (string) | null;
    path?: (string) | null;
};

export type SharingInfoFolder = {
    readonly id: number;
    readonly is_shared: boolean;
};

export type SharingInfoTemplate = {
    readonly id: number;
    readonly is_shared: boolean;
};

export type SignableDelivery = {
    readonly id: number;
    failure_email_recipients?: (string) | null;
    account: number;
    parties: Array<{
        party_name: string;
        party_email: string;
        party_role: 'signer' | 'copy';
    }>;
    name: string;
    type?: 'signable';
    success_callback_url?: (string) | null;
    success_callback_payload?: {
        [key: string]: unknown;
    } | null;
    success_callback_headers?: {
        [key: string]: unknown;
    } | null;
    last_used_on?: (string) | null;
    title?: (string) | null;
    expire_after?: (number) | null;
    remind_after?: (number) | null;
};

export type SignNowDelivery = {
    readonly id: number;
    failure_email_recipients?: (string) | null;
    account: number;
    signers: Array<{
        order?: string;
        role: string;
        email: string;
    }>;
    name: string;
    type?: 'sign_now';
    success_callback_url?: (string) | null;
    success_callback_payload?: {
        [key: string]: unknown;
    } | null;
    success_callback_headers?: {
        [key: string]: unknown;
    } | null;
    last_used_on?: (string) | null;
    subject?: (string) | null;
    message?: (string) | null;
    cc?: Array<(string)>;
    sequenced_signing?: boolean;
    enable_optional_signers?: boolean;
};

export type SurveyPrompt = {
    readonly show_survey_prompt: boolean;
};

export type TeamMember = {
    readonly id: number;
    readonly user: (User);
    role?: 'owner' | 'admin' | 'manager' | 'member' | 'billing_manager';
    is_deleted?: boolean;
};

export type Template = {
    readonly id: number;
    preferences?: TemplateSettings;
    title: string;
    description?: (string) | null;
    readonly type: 'docx' | 'html' | 'fillable_pdf' | 'pptx' | 'xlsx' | 'g_document' | 'g_presentation' | 'g_spreadsheet';
    readonly created_time: string;
    readonly updated_time: string;
    document_status?: 'active' | 'test';
    readonly deleted_time: (string) | null;
    readonly created_by: number;
    readonly updated_by: (number) | null;
    folder?: (number) | null;
};

export type TemplateCount = {
    templates_count: number;
};

export type TemplateDelivery = {
    readonly id: number;
    name: string;
    readonly type: 'webhook' | 'docu_sign' | 'sign_now' | 'zoho_crm' | 'dropbox' | 'google_drive' | 'podio' | 'one_drive' | 'eversign' | 'hellosign' | 'aws_s3' | 'signable' | 'yousign' | 'email' | 'sftp';
};

export type type3 = 'webhook' | 'docu_sign' | 'sign_now' | 'zoho_crm' | 'dropbox' | 'google_drive' | 'podio' | 'one_drive' | 'eversign' | 'hellosign' | 'aws_s3' | 'signable' | 'yousign' | 'email' | 'sftp';

export type TemplateGallery = {
    readonly id: number;
    readonly image_path: string;
    readonly file_type: string;
    category: GalleryCategory;
    title: string;
    description?: (string) | null;
    images_count?: (number) | null;
};

export type TemplateInfo = {
    readonly id: number;
    readonly name: string;
    readonly status: string;
    readonly type: string;
};

export type TemplateSchema = {
    name: string;
    type: 'string' | 'array' | 'object' | 'generic';
    generics: 'string' | 'array' | 'object' | 'generic';
    fields: Array<TemplateSchema>;
};

export type type4 = 'string' | 'array' | 'object' | 'generic';

export type generics = 'string' | 'array' | 'object' | 'generic';

export type TemplateSettings = {
    margin?: {
        top?: number;
        left?: number;
        right?: number;
        bottom?: number;
    } | null;
    timezone?: string;
    readonly info: (FillablePdfSettings);
    dynamic_images?: Array<DynamicImage> | null;
    output_file_name?: string;
    output_type?: 'html' | 'pdf' | 'jpeg' | 'png' | 'docx' | 'pptx' | 'xlsx';
    password?: (string) | null;
    format?: 'A3' | 'A4' | 'A5' | 'Legal' | 'Letter' | 'Tabloid' | 'Custom';
    orientation?: 'portrait' | 'landscape';
    header?: (string) | null;
    footer?: (string) | null;
    width?: (number) | null;
    height?: (number) | null;
    auto_number?: (number) | null;
    flatten_pdf?: boolean;
    emulate_mode?: ('print' | 'screen') | null;
};

export type format = 'A3' | 'A4' | 'A5' | 'Legal' | 'Letter' | 'Tabloid' | 'Custom';

export type orientation = 'portrait' | 'landscape';

export type emulate_mode = 'print' | 'screen';

export type TemplateSharing = {
    readonly id: number;
    permission?: 'read' | 'write' | 'manage';
    user: number;
};

export type ThreadMessages = {
    messages: {
        [key: string]: unknown;
    };
};

export type Timezone = {
    readonly name: string;
    readonly tz: string;
};

export type TransferOwnership = {
    transfer_to: number;
    otp: number;
};

export type UnauthenticatedError = {
    detail: string;
};

export type UpdateCustomerThreadInput = {
    message: string;
};

export type UpdateCustomerThreadOutput = {
    output_message: string;
};

export type UpdateDeliveryAccount = {
    readonly id: number;
    type: 'hellosign' | 'aws_s3' | 'signable' | 'yousign' | 'email' | 'sftp';
    readonly sub_type: string;
    readonly used_by: number;
    readonly name: (string) | null;
    credentials: {
        [key: string]: unknown;
    };
    readonly is_expired: boolean;
    readonly updated_at: string;
    use_for_images?: boolean;
};

export type UpdateThreadName = {
    thread_name: string;
};

export type UploadTemplateImage = {
    upload: (Blob | File);
};

export type User = {
    readonly id: number;
    /**
     * globally unique identifier for user
     */
    readonly guid: string;
    first_name?: string;
    last_name?: string;
    email: string;
    timezone?: 'Pacific/Midway' | 'America/Adak' | 'Pacific/Honolulu' | 'Pacific/Marquesas' | 'America/Anchorage' | 'America/Tijuana' | 'America/Los_Angeles' | 'America/Phoenix' | 'America/Chihuahua' | 'America/Denver' | 'America/Belize' | 'America/Chicago' | 'Pacific/Easter' | 'America/Mexico_City' | 'America/Regina' | 'America/Bogota' | 'America/Cancun' | 'America/New_York' | 'America/Port-au-Prince' | 'America/Havana' | 'America/Indiana/Indianapolis' | 'America/Asuncion' | 'America/Halifax' | 'America/Caracas' | 'America/Cuiaba' | 'America/Manaus' | 'America/Santiago' | 'America/Grand_Turk' | 'America/St_Johns' | 'America/Fortaleza' | 'America/Sao_Paulo' | 'America/Cayenne' | 'America/Buenos_Aires' | 'America/Godthab' | 'America/Montevideo' | 'America/Miquelon' | 'America/Bahia' | 'America/Noronha' | 'Atlantic/Azores' | 'Atlantic/Cape_Verde' | 'UTC' | 'Africa/Casablanca' | 'Europe/London' | 'Africa/Monrovia' | 'Europe/Amsterdam' | 'Europe/Belgrade' | 'Europe/Brussels' | 'Europe/Warsaw' | 'Africa/Algiers' | 'Africa/Windhoek' | 'Asia/Amman' | 'Europe/Athens' | 'Asia/Beirut' | 'Africa/Cairo' | 'Asia/Damascus' | 'Asia/Gaza' | 'Africa/Harare' | 'Europe/Helsinki' | 'Asia/Jerusalem' | 'Europe/Kaliningrad' | 'Africa/Tripoli' | 'Asia/Baghdad' | 'Asia/Istanbul' | 'Asia/Kuwait' | 'Europe/Minsk' | 'Europe/Moscow' | 'Africa/Nairobi' | 'Asia/Tehran' | 'Asia/Muscat' | 'Europe/Astrakhan' | 'Asia/Baku' | 'Europe/Samara' | 'Indian/Mauritius' | 'Asia/Tbilisi' | 'Asia/Yerevan' | 'Asia/Kabul' | 'Asia/Tashkent' | 'Asia/Yekaterinburg' | 'Asia/Karachi' | 'Asia/Kolkata' | 'Asia/Colombo' | 'Asia/Katmandu' | 'Asia/Almaty' | 'Asia/Dhaka' | 'Asia/Rangoon' | 'Asia/Novosibirsk' | 'Asia/Bangkok' | 'Asia/Barnaul' | 'Asia/Hovd' | 'Asia/Krasnoyarsk' | 'Asia/Tomsk' | 'Asia/Chongqing' | 'Asia/Irkutsk' | 'Asia/Kuala_Lumpur' | 'Australia/Perth' | 'Asia/Taipei' | 'Asia/Ulaanbaatar' | 'Asia/Pyongyang' | 'Australia/Eucla' | 'Asia/Chita' | 'Asia/Tokyo' | 'Asia/Seoul' | 'Asia/Yakutsk' | 'Australia/Adelaide' | 'Australia/Darwin' | 'Australia/Brisbane' | 'Australia/Canberra' | 'Pacific/Guam' | 'Australia/Hobart' | 'Asia/Vladivostok' | 'Australia/Lord_Howe' | 'Pacific/Bougainville' | 'Asia/Srednekolymsk' | 'Asia/Magadan' | 'Pacific/Norfolk' | 'Asia/Sakhalin' | 'Pacific/Guadalcanal' | 'Asia/Anadyr' | 'Pacific/Auckland' | 'Pacific/Fiji' | 'Pacific/Chatham' | 'Pacific/Tongatapu' | 'Pacific/Apia' | 'Pacific/Kiritimati';
    locale?: (string) | null;
    readonly theme: 'light' | 'dark' | 'system';
    readonly g2_verified: boolean;
    is_mfa_enabled?: boolean;
};

export type UserPersonalization = {
    ui_version?: 1 | 2;
    'list_view:templates'?: UserPersonalizationListViewTemplate;
    'tp:freshchat:restoreId'?: string;
};

export type ui_version = 1 | 2;

export type UserPersonalizationListViewTemplate = {
    type: 'card' | 'template';
};

export type type5 = 'card' | 'template';

export type ValidationError = {
    errors: {
        [key: string]: Array<(string)>;
    };
    non_field_errors: Array<(string)>;
};

export type VerifyEmailAccountOTP = {
    action_name: 'verify' | 'update';
    email?: (string) | null;
    otp: string;
};

export type WebhookDelivery = {
    readonly id: number;
    failure_email_recipients?: (string) | null;
    name: string;
    type?: 'webhook';
    success_callback_url?: (string) | null;
    success_callback_payload?: {
        [key: string]: unknown;
    } | null;
    success_callback_headers?: {
        [key: string]: unknown;
    } | null;
    last_used_on?: (string) | null;
    url: string;
    headers?: {
        [key: string]: unknown;
    } | null;
    payload?: {
        [key: string]: unknown;
    } | null;
};

export type Workspace = {
    readonly id: number;
    org_name: string;
    readonly unique_key: string;
    readonly role: string;
    readonly timezone: 'Pacific/Midway' | 'America/Adak' | 'Pacific/Honolulu' | 'Pacific/Marquesas' | 'America/Anchorage' | 'America/Tijuana' | 'America/Los_Angeles' | 'America/Phoenix' | 'America/Chihuahua' | 'America/Denver' | 'America/Belize' | 'America/Chicago' | 'Pacific/Easter' | 'America/Mexico_City' | 'America/Regina' | 'America/Bogota' | 'America/Cancun' | 'America/New_York' | 'America/Port-au-Prince' | 'America/Havana' | 'America/Indiana/Indianapolis' | 'America/Asuncion' | 'America/Halifax' | 'America/Caracas' | 'America/Cuiaba' | 'America/Manaus' | 'America/Santiago' | 'America/Grand_Turk' | 'America/St_Johns' | 'America/Fortaleza' | 'America/Sao_Paulo' | 'America/Cayenne' | 'America/Buenos_Aires' | 'America/Godthab' | 'America/Montevideo' | 'America/Miquelon' | 'America/Bahia' | 'America/Noronha' | 'Atlantic/Azores' | 'Atlantic/Cape_Verde' | 'UTC' | 'Africa/Casablanca' | 'Europe/London' | 'Africa/Monrovia' | 'Europe/Amsterdam' | 'Europe/Belgrade' | 'Europe/Brussels' | 'Europe/Warsaw' | 'Africa/Algiers' | 'Africa/Windhoek' | 'Asia/Amman' | 'Europe/Athens' | 'Asia/Beirut' | 'Africa/Cairo' | 'Asia/Damascus' | 'Asia/Gaza' | 'Africa/Harare' | 'Europe/Helsinki' | 'Asia/Jerusalem' | 'Europe/Kaliningrad' | 'Africa/Tripoli' | 'Asia/Baghdad' | 'Asia/Istanbul' | 'Asia/Kuwait' | 'Europe/Minsk' | 'Europe/Moscow' | 'Africa/Nairobi' | 'Asia/Tehran' | 'Asia/Muscat' | 'Europe/Astrakhan' | 'Asia/Baku' | 'Europe/Samara' | 'Indian/Mauritius' | 'Asia/Tbilisi' | 'Asia/Yerevan' | 'Asia/Kabul' | 'Asia/Tashkent' | 'Asia/Yekaterinburg' | 'Asia/Karachi' | 'Asia/Kolkata' | 'Asia/Colombo' | 'Asia/Katmandu' | 'Asia/Almaty' | 'Asia/Dhaka' | 'Asia/Rangoon' | 'Asia/Novosibirsk' | 'Asia/Bangkok' | 'Asia/Barnaul' | 'Asia/Hovd' | 'Asia/Krasnoyarsk' | 'Asia/Tomsk' | 'Asia/Chongqing' | 'Asia/Irkutsk' | 'Asia/Kuala_Lumpur' | 'Australia/Perth' | 'Asia/Taipei' | 'Asia/Ulaanbaatar' | 'Asia/Pyongyang' | 'Australia/Eucla' | 'Asia/Chita' | 'Asia/Tokyo' | 'Asia/Seoul' | 'Asia/Yakutsk' | 'Australia/Adelaide' | 'Australia/Darwin' | 'Australia/Brisbane' | 'Australia/Canberra' | 'Pacific/Guam' | 'Australia/Hobart' | 'Asia/Vladivostok' | 'Australia/Lord_Howe' | 'Pacific/Bougainville' | 'Asia/Srednekolymsk' | 'Asia/Magadan' | 'Pacific/Norfolk' | 'Asia/Sakhalin' | 'Pacific/Guadalcanal' | 'Asia/Anadyr' | 'Pacific/Auckland' | 'Pacific/Fiji' | 'Pacific/Chatham' | 'Pacific/Tongatapu' | 'Pacific/Apia' | 'Pacific/Kiritimati';
    readonly plan_id: (string) | null;
    readonly plan_status: string;
    readonly active: boolean;
    mfa_enforced?: boolean;
    readonly use_froala: boolean;
    readonly created_time: string;
};

export type YouSignDelivery = {
    readonly id: number;
    failure_email_recipients?: (string) | null;
    account: number;
    signers: Array<{
        first_name: string;
        last_name: string;
        email: string;
        phone_number?: string;
        locale: 'en' | 'fr' | 'de' | 'it' | 'nl' | 'es' | 'pl';
        success_url?: string;
        error_url?: string;
        signature_authentication_mode: 'otp_email' | 'otp_sms' | 'no_otp';
        signature_level: 'electronic_signature' | 'advanced_electronic_signature' | 'electronic_signature_with_qualified_certificate' | 'qualified_electronic_signature_mode_1';
        order?: number;
    }>;
    approvers?: Array<{
        locale: 'en' | 'fr' | 'de' | 'it' | 'nl' | 'es' | 'pl';
        first_name: string;
        last_name: string;
        email: string;
        phone_number?: string;
    }> | null;
    followers?: Array<{
        locale: 'en' | 'fr' | 'de' | 'it' | 'nl' | 'es' | 'pl';
        email: string;
    }> | null;
    reminder_settings?: {
        interval_in_days: 1 | 2 | 7 | 14;
        max_occurrences: number;
    } | null;
    name: string;
    type?: 'yousign';
    success_callback_url?: (string) | null;
    success_callback_payload?: {
        [key: string]: unknown;
    } | null;
    success_callback_headers?: {
        [key: string]: unknown;
    } | null;
    last_used_on?: (string) | null;
    title: string;
    email_custom_note?: (string) | null;
    delivery_mode?: 'email';
    ordered_signers?: boolean;
    timezone?: (string) | null;
    expiration_date?: (string) | null;
    custom_experience_id?: (string) | null;
    workspace_id?: (string) | null;
    audit_trail_locale?: (string) | null;
    enable_optional_signers?: boolean;
};

export type interval_in_days = 1 | 2 | 7 | 14;

export type delivery_mode = 'email';

export type CreateTemplateOnlineBuilderAiData = {
    requestBody: OmitReadonly<AITemplateCreate>;
};

export type CreateTemplateOnlineBuilderAiResponse = (Template);

export type EditTemplateOnlineBuilderAiData = {
    requestBody: OmitReadonly<AITemplateEdit>;
};

export type EditTemplateOnlineBuilderAiResponse = (AITemplateEdit);

export type PromptSuggestionsOnlineBuilderAiData = {
    requestBody: OmitReadonly<PromptSuggestions>;
};

export type PromptSuggestionsOnlineBuilderAiResponse = (PromptSuggestions);

export type ListAllChatThreadsData = {
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    /**
     * A search term.
     */
    search?: string;
};

export type ListAllChatThreadsResponse = (Array<ChatThreads>);

export type CreateNewCustomerThreadData = {
    requestBody: OmitReadonly<CreateCustomerThreadInput>;
};

export type CreateNewCustomerThreadResponse = (CreateCustomerThreadOutput);

export type AiChatThreadsRetrieveData = {
    threadId: string;
};

export type AiChatThreadsRetrieveResponse = (ChatThreads);

export type UpdateCustomerThreadData = {
    requestBody: OmitReadonly<UpdateCustomerThreadInput>;
    threadId: string;
};

export type UpdateCustomerThreadResponse = (UpdateCustomerThreadOutput);

export type AiChatThreadsDestroyData = {
    threadId: string;
};

export type AiChatThreadsDestroyResponse = (void);

export type GetMessagesForThreadData = {
    threadId: string;
};

export type GetMessagesForThreadResponse = (ThreadMessages);

export type UpdateCustomerThreadNameData = {
    requestBody: OmitReadonly<UpdateThreadName>;
    threadId: string;
};

export type UpdateCustomerThreadNameResponse = (void);

export type AppendFilesData = {
    requestBody: OmitReadonly<AppendFiles>;
    /**
     * Client Origin
     */
    xClient?: string;
};

export type AppendFilesResponse = ({
    file_url?: string;
    file_name?: string;
});

export type ListAuthTokensData = {
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    /**
     * A search term.
     */
    search?: string;
};

export type ListAuthTokensResponse = (Array<AuthToken>);

export type CreateAuthTokenData = {
    requestBody: OmitReadonly<AuthToken>;
};

export type CreateAuthTokenResponse = (AuthToken);

export type UpdateAuthTokenData = {
    /**
     * A unique integer value identifying this auth token.
     */
    id: number;
    requestBody: OmitReadonly<AuthToken>;
};

export type UpdateAuthTokenResponse = (AuthToken);

export type DeleteAuthTokenData = {
    /**
     * A unique integer value identifying this auth token.
     */
    id: number;
};

export type DeleteAuthTokenResponse = (void);

export type GetDomainData = {
    /**
     * A unique integer value identifying this domain.
     */
    id: number;
};

export type GetDomainResponse = (Domain);

export type VerifyDomainData = {
    /**
     * A unique integer value identifying this domain.
     */
    id: number;
    requestBody?: OmitReadonly<PatchedDomain>;
};

export type VerifyDomainResponse = (DomainVerify);

export type ListFoldersData = {
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    permission?: 'manage' | 'read' | 'write';
};

export type ListFoldersResponse = (Array<Folder>);

export type CreateFolderData = {
    requestBody: OmitReadonly<Folder>;
};

export type CreateFolderResponse = (Folder);

export type ListFolderSharingData = {
    folderId: number;
};

export type ListFolderSharingResponse = (Array<FolderSharing>);

export type CreateFolderSharingPermissionData = {
    folderId: number;
    requestBody: OmitReadonly<Array<FolderSharing>>;
};

export type CreateFolderSharingPermissionResponse = (Array<FolderSharing>);

export type GetFolderSharingData = {
    folderId: number;
    /**
     * A unique integer value identifying this folder sharing setting.
     */
    id: number;
};

export type GetFolderSharingResponse = (FolderSharing);

export type UpdateFolderSharingPermissionContentData = {
    folderId: number;
    /**
     * A unique integer value identifying this folder sharing setting.
     */
    id: number;
    requestBody?: OmitReadonly<PatchedUpdateFolderSharing>;
};

export type UpdateFolderSharingPermissionContentResponse = (FolderSharing);

export type RevokeFolderSharingPermissionData = {
    folderId: number;
    /**
     * A unique integer value identifying this folder sharing setting.
     */
    id: number;
};

export type RevokeFolderSharingPermissionResponse = (void);

export type UpdateFolderData = {
    /**
     * A unique integer value identifying this folder.
     */
    id: number;
    requestBody: OmitReadonly<Folder>;
};

export type UpdateFolderResponse = (Folder);

export type DeleteFolderData = {
    /**
     * A unique integer value identifying this folder.
     */
    id: number;
};

export type DeleteFolderResponse = (void);

export type GetUserCreatedFolderCountData = {
    /**
     * Owner Id of resource
     */
    ownerId: string;
};

export type GetUserCreatedFolderCountResponse = (FolderCount);

export type FoldersSharingStatusRetrieveResponse = (SharingInfoFolder);

export type ListGalleryTemplatesData = {
    category?: number;
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    /**
     * A search term.
     */
    search?: string;
};

export type ListGalleryTemplatesResponse = (Array<TemplateGallery>);

export type GetGalleryTemplateData = {
    /**
     * A unique integer value identifying this template gallery.
     */
    id: number;
};

export type GetGalleryTemplateResponse = (TemplateGallery);

export type ListBannerNotificationsResponse = (BannerNotification);

export type GetAppMetaResponse = (Meta);

export type ListSubscriptionPlansResponse = (Array<Plan>);

export type ListTimezonesResponse = (Array<Timezone>);

export type GenerateDocumentData = {
    download?: 'false' | 'file' | 'true';
    /**
     * A unique integer value identifying this document.
     */
    id: number;
    outputType?: 'docx' | 'html' | 'pdf' | 'png' | 'pptx' | 'xlsx';
    requestBody?: {
        [key: string]: unknown;
    };
    /**
     * Client Origin
     */
    xClient?: string;
};

export type GenerateDocumentResponse = (Template);

export type TestDocumentGenerationData = {
    /**
     * A unique integer value identifying this document.
     */
    id: number;
    outputType?: 'docx' | 'html' | 'pdf' | 'png' | 'pptx' | 'xlsx';
    requestBody?: {
        [key: string]: unknown;
    };
};

export type TestDocumentGenerationResponse = (Template);

export type GetTestDataData = {
    /**
     * A unique integer value identifying this document.
     */
    id: number;
};

export type GetTestDataResponse = (Template);

export type ListGenerationLinksData = {
    templateId: number;
};

export type ListGenerationLinksResponse = (Array<DocumentMergeLink>);

export type ListBulkGenerationTasksData = {
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    status?: 0 | 1 | 2 | 3 | 4 | 5;
    templateId: number;
};

export type ListBulkGenerationTasksResponse = (PaginatedBulkGenList);

export type GetBulkGenerationTaskData = {
    /**
     * Task id
     */
    id: number;
    /**
     * Template id
     */
    templateId: number;
};

export type GetBulkGenerationTaskResponse = (BulkGen);

export type CancelBulkGenerationTaskData = {
    /**
     * Task id
     */
    id: number;
    requestBody?: OmitReadonly<BulkGen>;
    /**
     * Template id
     */
    templateId: number;
};

export type CancelBulkGenerationTaskResponse = (BulkGen);

export type GetBulkGenerationDraftData = {
    /**
     * Task id
     */
    id: number;
    /**
     * Template id
     */
    templateId: number;
};

export type GetBulkGenerationDraftResponse = (BulkGenData);

export type SaveBulkGenerationDraftData = {
    /**
     * Task id
     */
    id: number;
    requestBody?: {
        [key: string]: unknown;
    };
    /**
     * Template id
     */
    templateId: number;
};

export type SaveBulkGenerationDraftResponse = (void);

export type TriggerBulkGenerationDraftData = {
    /**
     * Task id
     */
    id: number;
    requestBody?: {
        [key: string]: unknown;
    };
    /**
     * Template id
     */
    templateId: number;
};

export type TriggerBulkGenerationDraftResponse = (BulkGen);

export type UploadForBulkGenerationData = {
    formData: BulkGenUpload;
    /**
     * Template id
     */
    templateId: number;
};

export type UploadForBulkGenerationResponse = (BulkGenData);

export type GetCreatedDocumentsHistoryData = {
    /**
     * DateTime in this format: 2019-05-02 16:25:12.353000
     */
    endDate?: string;
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * DateTime in this format: 2019-05-02 16:25:12.353000
     */
    startDate?: string;
    status?: 'error' | 'pending' | 'success';
    template?: number;
};

export type GetCreatedDocumentsHistoryResponse = (PaginatedMergeHistoryList);

export type DownloadCreatedDocumentData = {
    /**
     * A unique integer value identifying this merge history.
     */
    id: number;
};

export type DownloadCreatedDocumentResponse = ((Blob | File));

export type RetryDeliveryData = {
    /**
     * A unique integer value identifying this merge history.
     */
    id: number;
    requestBody: OmitReadonly<MergeHistory>;
};

export type RetryDeliveryResponse = (MergeHistory);

export type GetCreatedExportMergeHistoryData = {
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
};

export type GetCreatedExportMergeHistoryResponse = (Array<ExportMergeHistory>);

export type CreateExportHistoryTaskData = {
    requestBody: OmitReadonly<ExportMergeHistory>;
};

export type CreateExportHistoryTaskResponse = (ExportMergeHistory);

export type DownloadCreatedExportDocumentData = {
    /**
     * A unique integer value identifying this export merge history task.
     */
    id: number;
};

export type DownloadCreatedExportDocumentResponse = ((Blob | File));

export type ListInvitationData = {
    isAccepted?: boolean;
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    /**
     * A search term.
     */
    search?: string;
};

export type ListInvitationResponse = (Array<Invitation>);

export type CreateInvitationData = {
    requestBody: OmitReadonly<Invitation>;
};

export type CreateInvitationResponse = (Invitation);

export type RetrieveInvitationByKeyData = {
    inviteKey: string;
};

export type RetrieveInvitationByKeyResponse = (Invitation);

export type DeleteInvitationData = {
    /**
     * A unique integer value identifying this invitation.
     */
    id: number;
};

export type DeleteInvitationResponse = (void);

export type RetrieveInvitationForAcceptData = {
    /**
     * A unique integer value identifying this invitation.
     */
    id: number;
};

export type RetrieveInvitationForAcceptResponse = (Invitation);

export type AcceptInvitationData = {
    /**
     * A unique integer value identifying this invitation.
     */
    id: number;
};

export type AcceptInvitationResponse = (AcceptInvite);

export type ResendInvitationData = {
    /**
     * A unique integer value identifying this invitation.
     */
    id: number;
};

export type ResendInvitationResponse = (Invitation);

export type ListDeliveryAccountsData = {
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    /**
     * A search term.
     */
    search?: string;
    type?: 'aws_s3' | 'docu_sign' | 'dropbox' | 'email' | 'eversign' | 'google_drive' | 'hellosign' | 'one_drive' | 'podio' | 'sftp' | 'sign_now' | 'signable' | 'yousign' | 'zoho' | 'zoho_crm';
};

export type ListDeliveryAccountsResponse = (Array<DeliveryAccount>);

export type AddDeliveryAccountData = {
    requestBody: OmitReadonly<DeliveryAccount>;
};

export type AddDeliveryAccountResponse = (DeliveryAccount);

export type InvokeIntegratorData = {
    /**
     * sub-type of integrator. For example: sandbox or production for docu_sign
     */
    environment?: string;
    integratorType: string;
};

export type UpdateDeliveryAccountData = {
    /**
     * A unique integer value identifying this delivery account.
     */
    id: number;
    requestBody: OmitReadonly<UpdateDeliveryAccount>;
};

export type UpdateDeliveryAccountResponse = (DeliveryAccount);

export type RevokeDeliveryAccountData = {
    /**
     * A unique integer value identifying this delivery account.
     */
    id: number;
};

export type RevokeDeliveryAccountResponse = (void);

export type ListAccountDeliveriesData = {
    /**
     * A unique integer value identifying this delivery account.
     */
    id: number;
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    type?: 'aws_s3' | 'docu_sign' | 'dropbox' | 'email' | 'eversign' | 'google_drive' | 'hellosign' | 'one_drive' | 'podio' | 'sftp' | 'sign_now' | 'signable' | 'yousign' | 'zoho' | 'zoho_crm';
};

export type ListAccountDeliveriesResponse = (PaginatedAccountDeliveryList);

export type ListDeliveryEmailsForEmailAccountData = {
    /**
     * A unique integer value identifying this delivery account.
     */
    id: number;
};

export type ListDeliveryEmailsForEmailAccountResponse = (Array<(string)>);

export type GetDocusignFoldersData = {
    /**
     * A unique integer value identifying this delivery account.
     */
    id: number;
};

export type GetDocusignFoldersResponse = (DeliveryAccount);

export type GetGooglePickerPayloadData = {
    /**
     * A unique integer value identifying this delivery account.
     */
    id: number;
};

export type GetGooglePickerPayloadResponse = (GoogleDrivePickerPayload);

export type InitiateEmailAuthorizationData = {
    /**
     * A unique integer value identifying this delivery account.
     */
    id: number;
    requestBody: OmitReadonly<SendEmailAccountAuthorizationOTP>;
};

export type InitiateEmailAuthorizationResponse = (void);

export type ReconnectAccountData = {
    /**
     * A unique integer value identifying this delivery account.
     */
    id: number;
};

export type UpdateDeliveryAccountsUseForImagesFlagData = {
    /**
     * A unique integer value identifying this delivery account.
     */
    id: number;
};

export type UpdateDeliveryAccountsUseForImagesFlagResponse = (DeliveryAccount);

export type VerifyEmailOtpData = {
    /**
     * A unique integer value identifying this delivery account.
     */
    id: number;
    requestBody: OmitReadonly<VerifyEmailAccountOTP>;
};

export type VerifyEmailOtpResponse = (void);

export type SendTestMailData = {
    requestBody: OmitReadonly<SendTestSmtpMail>;
};

export type SendTestMailResponse = (unknown);

export type GetFolderPermissionsData = {
    ids?: string;
};

export type GetFolderPermissionsResponse = (unknown);

export type GetGlobalPermissionsResponse = (GlobalPermission);

export type GetTemplatePermissionsData = {
    ids?: string;
};

export type GetTemplatePermissionsResponse = (unknown);

export type GetUserPersonalizationResponse = (Array<UserPersonalization>);

export type UpdateUserPersonalizationData = {
    requestBody?: OmitReadonly<UserPersonalization>;
};

export type UpdateUserPersonalizationResponse = ({
    [key: string]: unknown;
});

export type GetSubscriptionDetailsResponse = (ChargebeeSubscription);

export type ExtendTrialResponse = (void);

export type GetChargebeeHostedPageData = {
    planId?: string;
};

export type GetChargebeeHostedPageResponse = ({
    [key: string]: unknown;
});

export type GetChargebeePortalSessionResponse = (ChargebeeSubscription);

export type SubscriptionRenewRequestCreateData = {
    requestBody?: OmitReadonly<RenewSubscription>;
};

export type SubscriptionRenewRequestCreateResponse = (void);

export type GetChargebeeUnpaidInvoicesResponse = (HostedPage);

export type ListAllTeamMembersData = {
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    /**
     * A search term.
     */
    search?: string;
};

export type ListAllTeamMembersResponse = (Array<TeamMember>);

export type DeleteTeamMemberData = {
    id: string;
    transferTo?: string;
};

export type DeleteTeamMemberResponse = (void);

export type ChangeRoleOfTeamMemberData = {
    id: string;
    requestBody: OmitReadonly<ChangeRole>;
};

export type ChangeRoleOfTeamMemberResponse = (TeamMember);

export type TransferOwnershipToAdminUserData = {
    requestBody: OmitReadonly<TransferOwnership>;
};

export type TransferOwnershipToAdminUserResponse = (void);

export type ListTemplateDeliveriesData = {
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    templateId: number;
};

export type ListTemplateDeliveriesResponse = (Array<TemplateDelivery>);

export type CreateTemplateDeliveryData = {
    requestBody?: OmitReadonly<PolymorphicDelivery>;
    templateId: number;
};

export type CreateTemplateDeliveryResponse = (PolymorphicDelivery);

export type RetrieveTemplateDeliveryData = {
    /**
     * A unique integer value identifying this delivery.
     */
    id: number;
    templateId: number;
};

export type RetrieveTemplateDeliveryResponse = (PolymorphicDelivery);

export type UpdateTemplateDeliveryData = {
    /**
     * A unique integer value identifying this delivery.
     */
    id: number;
    requestBody?: OmitReadonly<PolymorphicDelivery>;
    templateId: number;
};

export type UpdateTemplateDeliveryResponse = (PolymorphicDelivery);

export type DeleteTemplateDeliveryData = {
    /**
     * A unique integer value identifying this delivery.
     */
    id: number;
    templateId: number;
};

export type DeleteTemplateDeliveryResponse = (void);

export type UploadDeliveryAttachmentsData = {
    formData: EmailDeliveryAttachment;
    /**
     * A unique integer value identifying this delivery.
     */
    id: number;
    templateId: number;
};

export type UploadDeliveryAttachmentsResponse = (PolymorphicDelivery);

export type DownloadDeliveryAttachmentData = {
    attachmentId: string;
    /**
     * A unique integer value identifying this delivery.
     */
    id: number;
    templateId: number;
};

export type DownloadDeliveryAttachmentResponse = (PolymorphicDelivery);

export type DeleteDeliveryAttachmentData = {
    attachmentId: string;
    /**
     * A unique integer value identifying this delivery.
     */
    id: number;
    templateId: number;
};

export type DeleteDeliveryAttachmentResponse = (void);

export type UpgradeDocusignDeliveryData = {
    /**
     * A unique integer value identifying this delivery.
     */
    id: number;
    templateId: number;
};

export type UpgradeDocusignDeliveryResponse = (PolymorphicDelivery);

export type ListTemplatesData = {
    folder?: number;
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    outputType?: 'docx' | 'html' | 'jpeg' | 'pdf' | 'png' | 'pptx' | 'xlsx';
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * A search term.
     */
    search?: string;
    status?: 'active' | 'test';
    type?: 'docx' | 'fillable_pdf' | 'g_document' | 'g_presentation' | 'g_spreadsheet' | 'html' | 'pptx' | 'xlsx';
};

export type ListTemplatesResponse = (PaginatedTemplateList);

export type CreateTemplateData = {
    formData: NewTemplate;
};

export type CreateTemplateResponse = (Template);

export type GetTemplateData = {
    /**
     * A unique integer value identifying this document.
     */
    id: number;
};

export type GetTemplateResponse = (Template);

export type UpdateTemplateData = {
    /**
     * A unique integer value identifying this document.
     */
    id: number;
    requestBody: OmitReadonly<Template>;
};

export type UpdateTemplateResponse = (Template);

export type UpdateTemplateContentData = {
    formData?: PatchedUpdateNewTemplate;
    /**
     * A unique integer value identifying this document.
     */
    id: number;
};

export type UpdateTemplateContentResponse = (Template);

export type TrashTemplateData = {
    /**
     * A unique integer value identifying this document.
     */
    id: number;
};

export type TrashTemplateResponse = (void);

export type CopyTemplateData = {
    /**
     * A unique integer value identifying this document.
     */
    id: number;
    requestBody: OmitReadonly<CopyTemplate>;
};

export type CopyTemplateResponse = (Template);

export type DownloadTemplateFileData = {
    /**
     * A unique integer value identifying this document.
     */
    id: number;
};

export type DownloadTemplateFileResponse = ((Blob | File));

export type UploadInlineImageOfTemplateData = {
    formData: UploadTemplateImage;
    /**
     * A unique integer value identifying this document.
     */
    id: number;
};

export type UploadInlineImageOfTemplateResponse = (unknown);

export type DeleteTemplatePermanentlyData = {
    /**
     * A unique integer value identifying this document.
     */
    id: number;
};

export type DeleteTemplatePermanentlyResponse = (void);

export type RestoreTemplateFromTrashData = {
    /**
     * A unique integer value identifying this document.
     */
    id: number;
    requestBody: OmitReadonly<Template>;
};

export type RestoreTemplateFromTrashResponse = (Template);

export type GetTemplateSchemaData = {
    /**
     * A unique integer value identifying this document.
     */
    id: number;
};

export type GetTemplateSchemaResponse = (TemplateSchema);

export type GetDetailedTemplateSchemaData = {
    /**
     * A unique integer value identifying this document.
     */
    id: number;
};

export type GetDetailedTemplateSchemaResponse = (Template);

export type ListTemplateSharingData = {
    templateId: number;
};

export type ListTemplateSharingResponse = (Array<TemplateSharing>);

export type CreateTemplateSharingPermissionData = {
    requestBody: OmitReadonly<Array<TemplateSharing>>;
    templateId: number;
};

export type CreateTemplateSharingPermissionResponse = (Array<TemplateSharing>);

export type GetTemplateSharingData = {
    /**
     * A unique integer value identifying this template sharing setting.
     */
    id: number;
    templateId: number;
};

export type GetTemplateSharingResponse = (TemplateSharing);

export type UpdateTemplateSharingPermissionContentData = {
    /**
     * A unique integer value identifying this template sharing setting.
     */
    id: number;
    requestBody?: OmitReadonly<PatchedUpdateTemplateSharing>;
    templateId: number;
};

export type UpdateTemplateSharingPermissionContentResponse = (TemplateSharing);

export type RevokeTemplateSharingPermissionData = {
    /**
     * A unique integer value identifying this template sharing setting.
     */
    id: number;
    templateId: number;
};

export type RevokeTemplateSharingPermissionResponse = (void);

export type ListAllTemplatesResponse = (Array<Template>);

export type GetUserCreatedTemplatesCountData = {
    /**
     * Owner Id of resource
     */
    ownerId: string;
};

export type GetUserCreatedTemplatesCountResponse = (TemplateCount);

export type MoveTemplatesToAnotherFolderData = {
    requestBody: OmitReadonly<MoveTemplate>;
};

export type MoveTemplatesToAnotherFolderResponse = (Template);

export type TemplatesSharingStatusRetrieveResponse = (SharingInfoTemplate);

export type ListTrashedTemplatesResponse = (Template);

export type InitiateAuthorizationSequenceData = {
    requestBody?: OmitReadonly<InitiateAuthorizationSequence>;
};

export type InitiateAuthorizationSequenceResponse = (void);

export type GetMeResponse = (User);

export type UpdateUserProfileData = {
    requestBody?: OmitReadonly<PatchedUpdateUser>;
};

export type UpdateUserProfileResponse = (unknown);

export type NpsNextReminderData = {
    requestBody: OmitReadonly<NpsNextReminder>;
};

export type NpsNextReminderResponse = (void);

export type NpsRatingData = {
    requestBody?: OmitReadonly<NpsRating>;
};

export type NpsRatingResponse = (void);

export type SaveCustomerFeedbackData = {
    requestBody: OmitReadonly<SaveCustomerFeedback>;
};

export type SaveCustomerFeedbackResponse = (void);

export type ShowSurveyPromptResponse = (SurveyPrompt);

export type UpdateG2ReviewUpdatedOnResponse = (void);

export type ListWorkspacesData = {
    /**
     * Which field to use when ordering the results.
     */
    ordering?: string;
    /**
     * A search term.
     */
    search?: string;
};

export type ListWorkspacesResponse = (Array<Workspace>);

export type CreateWorkspaceData = {
    requestBody: OmitReadonly<Workspace>;
};

export type CreateWorkspaceResponse = (Workspace);

export type GetCsmDetailsResponse = (CSMDetails);

export type GetCurrentWorkspaceResponse = (Workspace);

export type UpdateCurrentWorkspaceData = {
    requestBody?: OmitReadonly<PatchedWorkspace>;
};

export type UpdateCurrentWorkspaceResponse = (PatchedWorkspace);

export type DeleteCurrentWorkspaceData = {
    requestBody: OmitReadonly<DeleteCurrentWorkspace>;
};

export type DeleteCurrentWorkspaceResponse = (unknown);

export type GetWorkspaceDataRetentionPreferenceResponse = (RetentionPreference);

export type UpdateWorkspaceDataRetentionPreferenceData = {
    requestBody?: OmitReadonly<RetentionPreference>;
};

export type UpdateWorkspaceDataRetentionPreferenceResponse = (RetentionPreference);